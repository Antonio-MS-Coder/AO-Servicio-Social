{"version":3,"file":"static/js/287.22bd0d8b.chunk.js","mappings":"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","sources":["types/index.ts","utils/seedData.ts"],"sourcesContent":["// User types\nexport type UserRole = 'worker' | 'employer' | 'admin';\n\nexport interface User {\n  id: string;\n  email: string;\n  phone?: string;\n  displayName?: string;\n  photoURL?: string;\n  role: UserRole;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Worker profile\nexport interface WorkerProfile {\n  userId: string;\n  name: string;\n  trade: Trade;\n  secondaryTrades?: Trade[];\n  experience: number;\n  location: string;\n  bio?: string;\n  photoUrl?: string;\n  certifications: Certification[];\n  rating: number;\n  totalRatings: number;\n  available: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Employer profile\nexport interface EmployerProfile {\n  userId: string;\n  companyName: string;\n  contactName: string;\n  businessType: string;\n  location: string;\n  description?: string;\n  logoUrl?: string;\n  rating: number;\n  totalRatings: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Trade enum\nexport enum Trade {\n  WAITER = 'waiter',\n  COOK = 'cook',\n  BARTENDER = 'bartender',\n  CLEANER = 'cleaner',\n  SECURITY = 'security',\n  DRIVER = 'driver',\n  TRANSLATOR = 'translator',\n  GUIDE = 'guide',\n  ELECTRICIAN = 'electrician',\n  PLUMBER = 'plumber',\n  CARPENTER = 'carpenter',\n  PAINTER = 'painter',\n  GARDENER = 'gardener',\n  TECHNICIAN = 'technician',\n  OTHER = 'other'\n}\n\n// Certification\nexport interface Certification {\n  id: string;\n  name: string;\n  type?: string; // food_handling, first_aid, driver_license, etc.\n  issuer: string;\n  issueDate: Date;\n  expiryDate?: Date;\n  fileUrl?: string;\n  verified: boolean;\n}\n\n// Job posting\nexport interface JobPosting {\n  id: string;\n  employerId: string;\n  employerName: string;\n  title: string;\n  description: string;\n  trade: Trade;\n  salary: {\n    amount: number;\n    period: 'hour' | 'day' | 'week' | 'month' | 'project';\n  };\n  duration?: string;\n  location: string;\n  requirements?: string[];\n  status: 'open' | 'closed' | 'in_progress';\n  createdAt: Date;\n  updatedAt: Date;\n  applicants?: string[];\n}\n\n// Job application\nexport interface JobApplication {\n  id: string;\n  jobId: string;\n  workerId: string;\n  workerName: string;\n  workerPhoto?: string;\n  workerRating?: number;\n  workerExperience?: number;\n  workerTrade?: string;\n  coverLetter?: string;\n  status: 'pending' | 'accepted' | 'rejected';\n  appliedAt: Date | any;\n  updatedAt: Date | any;\n}\n\n// Rating\nexport interface Rating {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  jobId: string;\n  score: number;\n  comment?: string;\n  createdAt: Date;\n}\n\n// Message\nexport interface Message {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  content: string;\n  read: boolean;\n  createdAt: Date;\n}","import { \n  collection, \n  addDoc, \n  doc, \n  setDoc, \n  Timestamp,\n  getDocs,\n  query,\n  where,\n  deleteDoc\n} from 'firebase/firestore';\nimport { \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword \n} from 'firebase/auth';\nimport { db, auth } from '../config/firebase';\nimport { Trade } from '../types';\n\n// Sample data for seeding\nconst sampleWorkers = [\n  {\n    email: 'juan.martinez@example.com',\n    password: 'Test123!',\n    displayName: 'Juan Martínez',\n    phone: '55-1234-5678',\n    profile: {\n      name: 'Juan Martínez',\n      trade: Trade.COOK,\n      secondaryTrades: [Trade.WAITER],\n      experience: 5,\n      location: 'Santa Fe, Álvaro Obregón',\n      bio: 'Cocinero profesional con experiencia en cocina mexicana e internacional. Especialidad en parrilla y mariscos.',\n      certifications: [\n        {\n          id: '1',\n          name: 'Manejo Higiénico de Alimentos',\n          type: 'food_handling',\n          issuer: 'COFEPRIS',\n          issueDate: new Date('2023-01-15'),\n          verified: true\n        }\n      ],\n      rating: 4.8,\n      totalRatings: 12,\n      available: true,\n      skills: ['Cocina Mexicana', 'Parrilla', 'Mariscos', 'Repostería'],\n      preferredAreas: ['Santa Fe', 'San Ángel', 'Coyoacán']\n    }\n  },\n  {\n    email: 'maria.gonzalez@example.com',\n    password: 'Test123!',\n    displayName: 'María González',\n    phone: '55-2345-6789',\n    profile: {\n      name: 'María González',\n      trade: Trade.BARTENDER,\n      experience: 3,\n      location: 'San Ángel, Álvaro Obregón',\n      bio: 'Bartender creativa con certificación en mixología. Experta en coctelería clásica y molecular.',\n      certifications: [\n        {\n          id: '2',\n          name: 'Certificación en Mixología',\n          type: 'bartending',\n          issuer: 'Asociación Mexicana de Bartenders',\n          issueDate: new Date('2022-06-20'),\n          verified: true\n        }\n      ],\n      rating: 4.9,\n      totalRatings: 8,\n      available: true,\n      skills: ['Mixología', 'Coctelería Clásica', 'Flair Bartending', 'Servicio al Cliente'],\n      preferredAreas: ['San Ángel', 'Coyoacán', 'Del Valle']\n    }\n  },\n  {\n    email: 'carlos.rodriguez@example.com',\n    password: 'Test123!',\n    displayName: 'Carlos Rodríguez',\n    phone: '55-3456-7890',\n    profile: {\n      name: 'Carlos Rodríguez',\n      trade: Trade.SECURITY,\n      secondaryTrades: [Trade.DRIVER],\n      experience: 8,\n      location: 'Observatorio, Álvaro Obregón',\n      bio: 'Guardia de seguridad certificado con experiencia en eventos masivos y seguridad corporativa.',\n      certifications: [\n        {\n          id: '3',\n          name: 'Certificación en Seguridad Privada',\n          type: 'security',\n          issuer: 'SSP CDMX',\n          issueDate: new Date('2021-03-10'),\n          expiryDate: new Date('2024-03-10'),\n          verified: true\n        }\n      ],\n      rating: 4.7,\n      totalRatings: 15,\n      available: true,\n      skills: ['Seguridad Corporativa', 'Control de Accesos', 'Primeros Auxilios', 'Manejo Defensivo'],\n      preferredAreas: ['Observatorio', 'Santa Fe', 'Las Águilas']\n    }\n  },\n  {\n    email: 'ana.lopez@example.com',\n    password: 'Test123!',\n    displayName: 'Ana López',\n    phone: '55-4567-8901',\n    profile: {\n      name: 'Ana López',\n      trade: Trade.CLEANER,\n      experience: 6,\n      location: 'Olivar del Conde, Álvaro Obregón',\n      bio: 'Especialista en limpieza profunda y mantenimiento de espacios comerciales y residenciales.',\n      certifications: [],\n      rating: 4.6,\n      totalRatings: 20,\n      available: true,\n      skills: ['Limpieza Profunda', 'Sanitización', 'Organización', 'Lavandería'],\n      preferredAreas: ['Olivar del Conde', 'San Ángel', 'Guadalupe Inn']\n    }\n  },\n  {\n    email: 'pedro.sanchez@example.com',\n    password: 'Test123!',\n    displayName: 'Pedro Sánchez',\n    phone: '55-5678-9012',\n    profile: {\n      name: 'Pedro Sánchez',\n      trade: Trade.TRANSLATOR,\n      secondaryTrades: [Trade.GUIDE],\n      experience: 4,\n      location: 'San Ángel Inn, Álvaro Obregón',\n      bio: 'Traductor e intérprete inglés-español con experiencia en turismo y eventos corporativos.',\n      certifications: [\n        {\n          id: '4',\n          name: 'TOEFL iBT',\n          type: 'language',\n          issuer: 'ETS',\n          issueDate: new Date('2022-09-15'),\n          expiryDate: new Date('2024-09-15'),\n          verified: true\n        }\n      ],\n      rating: 4.9,\n      totalRatings: 6,\n      available: true,\n      skills: ['Inglés Avanzado', 'Traducción Simultánea', 'Guía Turístico', 'Francés Básico'],\n      preferredAreas: ['San Ángel', 'Coyoacán', 'Santa Fe']\n    }\n  }\n];\n\nconst sampleEmployers = [\n  {\n    email: 'restaurante.azteca@example.com',\n    password: 'Test123!',\n    displayName: 'Restaurante Azteca',\n    phone: '55-1111-2222',\n    profile: {\n      companyName: 'Restaurante Azteca',\n      contactName: 'Roberto Hernández',\n      businessType: 'Restaurante',\n      location: 'Santa Fe, Álvaro Obregón',\n      description: 'Restaurante de alta cocina mexicana con 15 años de experiencia. Buscamos talento comprometido.',\n      rating: 4.5,\n      totalRatings: 30,\n      verified: true\n    }\n  },\n  {\n    email: 'hotel.ejecutivo@example.com',\n    password: 'Test123!',\n    displayName: 'Hotel Ejecutivo Santa Fe',\n    phone: '55-3333-4444',\n    profile: {\n      companyName: 'Hotel Ejecutivo Santa Fe',\n      contactName: 'Laura Méndez',\n      businessType: 'Hotel',\n      location: 'Santa Fe, Álvaro Obregón',\n      description: 'Hotel de negocios 5 estrellas en el corazón de Santa Fe. Siempre en búsqueda de personal calificado.',\n      rating: 4.7,\n      totalRatings: 25,\n      verified: true\n    }\n  },\n  {\n    email: 'eventos.premier@example.com',\n    password: 'Test123!',\n    displayName: 'Eventos Premier',\n    phone: '55-5555-6666',\n    profile: {\n      companyName: 'Eventos Premier',\n      contactName: 'Diego Morales',\n      businessType: 'Organizador de Eventos',\n      location: 'San Ángel, Álvaro Obregón',\n      description: 'Empresa líder en organización de eventos corporativos y sociales. Necesitamos personal eventual.',\n      rating: 4.8,\n      totalRatings: 18,\n      verified: false\n    }\n  }\n];\n\nconst sampleJobs = [\n  {\n    title: 'Chef de Cocina para Evento Mundial',\n    description: 'Buscamos chef experimentado para eventos durante el Mundial 2026. Menús internacionales y mexicanos.',\n    trade: Trade.COOK,\n    salary: { amount: 800, period: 'day' as const },\n    duration: '3 meses',\n    location: 'Santa Fe, Álvaro Obregón',\n    requirements: [\n      'Experiencia mínima de 5 años',\n      'Certificación en manejo de alimentos',\n      'Disponibilidad inmediata',\n      'Inglés básico'\n    ],\n    status: 'open' as const\n  },\n  {\n    title: 'Bartenders para Hotel 5 Estrellas',\n    description: 'Hotel de lujo busca bartenders con experiencia para atender a huéspedes internacionales.',\n    trade: Trade.BARTENDER,\n    salary: { amount: 600, period: 'day' as const },\n    duration: 'Permanente',\n    location: 'Santa Fe, Álvaro Obregón',\n    requirements: [\n      'Certificación en mixología',\n      'Inglés conversacional',\n      'Experiencia en hoteles',\n      'Excelente presentación'\n    ],\n    status: 'open' as const\n  },\n  {\n    title: 'Personal de Seguridad para Estadio',\n    description: 'Se requiere personal de seguridad certificado para eventos del Mundial 2026.',\n    trade: Trade.SECURITY,\n    salary: { amount: 500, period: 'day' as const },\n    duration: '6 meses',\n    location: 'Observatorio, Álvaro Obregón',\n    requirements: [\n      'Certificación SSP vigente',\n      'Experiencia en eventos masivos',\n      'Condición física óptima',\n      'Disponibilidad de horario'\n    ],\n    status: 'open' as const\n  },\n  {\n    title: 'Meseros Bilingües para Restaurante',\n    description: 'Restaurante de alta cocina busca meseros con excelente servicio al cliente.',\n    trade: Trade.WAITER,\n    salary: { amount: 400, period: 'day' as const },\n    duration: 'Permanente',\n    location: 'San Ángel, Álvaro Obregón',\n    requirements: [\n      'Inglés fluido',\n      'Experiencia en fine dining',\n      'Conocimiento de vinos',\n      'Actitud de servicio'\n    ],\n    status: 'open' as const\n  },\n  {\n    title: 'Traductores para Eventos FIFA',\n    description: 'Necesitamos traductores inglés-español para eventos oficiales del Mundial.',\n    trade: Trade.TRANSLATOR,\n    salary: { amount: 1200, period: 'day' as const },\n    duration: '2 meses',\n    location: 'Santa Fe, Álvaro Obregón',\n    requirements: [\n      'Certificación en traducción',\n      'Experiencia en eventos deportivos',\n      'Disponibilidad total',\n      'Profesionalismo'\n    ],\n    status: 'open' as const\n  }\n];\n\nconst sampleCertifications = [\n  {\n    name: 'Manejo Higiénico de Alimentos',\n    description: 'Certificación oficial COFEPRIS para el manejo seguro de alimentos en establecimientos.',\n    provider: 'COFEPRIS',\n    category: 'Alimentos y Bebidas',\n    duration: '40 horas',\n    price: 0,\n    isFree: true,\n    requirements: ['Mayor de 18 años', 'Identificación oficial'],\n    benefits: ['Certificado oficial', 'Validez nacional', 'Material incluido'],\n    level: 'basic' as const,\n    maxStudents: 50,\n    currentStudents: 23,\n    status: 'active' as const,\n    online: false,\n    certificateType: 'Certificado Oficial',\n    location: 'Casa de Cultura Álvaro Obregón'\n  },\n  {\n    name: 'Inglés para Turismo',\n    description: 'Curso intensivo de inglés enfocado en atención a turistas para el Mundial 2026.',\n    provider: 'Alcaldía Álvaro Obregón',\n    category: 'Idiomas',\n    duration: '80 horas',\n    price: 0,\n    isFree: true,\n    requirements: ['Mayor de 16 años', 'Conocimientos básicos de inglés'],\n    benefits: ['Certificado de participación', 'Material digital', 'Práctica con nativos'],\n    level: 'intermediate' as const,\n    maxStudents: 30,\n    currentStudents: 18,\n    status: 'active' as const,\n    online: true,\n    certificateType: 'Certificado de Competencia'\n  },\n  {\n    name: 'Seguridad Privada Básica',\n    description: 'Formación básica en seguridad privada con certificación SSP.',\n    provider: 'SSP CDMX',\n    category: 'Seguridad',\n    duration: '120 horas',\n    price: 1500,\n    isFree: false,\n    requirements: ['Mayor de 21 años', 'Secundaria terminada', 'Carta de no antecedentes'],\n    benefits: ['Certificación SSP', 'Licencia de portación', 'Bolsa de trabajo'],\n    level: 'basic' as const,\n    maxStudents: 40,\n    currentStudents: 35,\n    status: 'active' as const,\n    online: false,\n    certificateType: 'Licencia Oficial',\n    location: 'Centro de Capacitación SSP'\n  },\n  {\n    name: 'Mixología y Coctelería',\n    description: 'Curso completo de preparación de bebidas y cocteles para bartenders.',\n    provider: 'Asociación de Bartenders CDMX',\n    category: 'Alimentos y Bebidas',\n    duration: '60 horas',\n    price: 0,\n    isFree: true,\n    requirements: ['Mayor de 18 años', 'Interés en bartending'],\n    benefits: ['Certificado profesional', 'Kit de bartender', 'Recetario digital'],\n    level: 'intermediate' as const,\n    maxStudents: 25,\n    currentStudents: 20,\n    status: 'active' as const,\n    online: false,\n    certificateType: 'Diploma Profesional',\n    location: 'Escuela de Hospitalidad AO'\n  },\n  {\n    name: 'Primeros Auxilios',\n    description: 'Capacitación en primeros auxilios y RCP certificada por Cruz Roja.',\n    provider: 'Cruz Roja Mexicana',\n    category: 'Salud',\n    duration: '20 horas',\n    price: 0,\n    isFree: true,\n    requirements: ['Mayor de 15 años'],\n    benefits: ['Certificación Cruz Roja', 'Manual de primeros auxilios', 'Práctica con maniquíes'],\n    level: 'basic' as const,\n    maxStudents: 35,\n    currentStudents: 28,\n    status: 'active' as const,\n    online: false,\n    certificateType: 'Certificado Cruz Roja',\n    location: 'Delegación Cruz Roja AO'\n  }\n];\n\n// Admin user\nconst adminUser = {\n  email: 'admin@alvaroobregon.gob.mx',\n  password: 'Admin2026!',\n  displayName: 'Administrador AO',\n  role: 'admin'\n};\n\nexport const seedDatabase = async () => {\n  try {\n    console.log('🌱 Starting database seeding...');\n    \n    // Check if data already exists\n    const usersSnapshot = await getDocs(collection(db, 'users'));\n    if (usersSnapshot.size > 5) {\n      console.log('⚠️ Database already has data. Skipping seed.');\n      return;\n    }\n\n    // Create admin user\n    try {\n      console.log('👤 Creating admin user...');\n      const adminCredential = await createUserWithEmailAndPassword(\n        auth, \n        adminUser.email, \n        adminUser.password\n      );\n      \n      await setDoc(doc(db, 'users', adminCredential.user.uid), {\n        email: adminUser.email,\n        displayName: adminUser.displayName,\n        role: adminUser.role,\n        status: 'active',\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n      \n      console.log('✅ Admin user created');\n    } catch (error: any) {\n      if (error.code !== 'auth/email-already-in-use') {\n        console.error('Error creating admin:', error);\n      }\n    }\n\n    // Create workers\n    console.log('👷 Creating workers...');\n    for (const worker of sampleWorkers) {\n      try {\n        const credential = await createUserWithEmailAndPassword(\n          auth,\n          worker.email,\n          worker.password\n        );\n        \n        await setDoc(doc(db, 'users', credential.user.uid), {\n          email: worker.email,\n          displayName: worker.displayName,\n          phone: worker.phone,\n          role: 'worker',\n          status: 'active',\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n        await addDoc(collection(db, 'workerProfiles'), {\n          userId: credential.user.uid,\n          ...worker.profile,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n        console.log(`✅ Worker created: ${worker.displayName}`);\n      } catch (error: any) {\n        if (error.code !== 'auth/email-already-in-use') {\n          console.error(`Error creating worker ${worker.email}:`, error);\n        }\n      }\n    }\n\n    // Create employers\n    console.log('🏢 Creating employers...');\n    for (const employer of sampleEmployers) {\n      try {\n        const credential = await createUserWithEmailAndPassword(\n          auth,\n          employer.email,\n          employer.password\n        );\n        \n        await setDoc(doc(db, 'users', credential.user.uid), {\n          email: employer.email,\n          displayName: employer.displayName,\n          phone: employer.phone,\n          role: 'employer',\n          status: 'active',\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n        await addDoc(collection(db, 'employerProfiles'), {\n          userId: credential.user.uid,\n          ...employer.profile,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n        console.log(`✅ Employer created: ${employer.displayName}`);\n      } catch (error: any) {\n        if (error.code !== 'auth/email-already-in-use') {\n          console.error(`Error creating employer ${employer.email}:`, error);\n        }\n      }\n    }\n\n    // Create jobs\n    console.log('💼 Creating job postings...');\n    const employerDocs = await getDocs(\n      query(collection(db, 'users'), where('role', '==', 'employer'))\n    );\n    \n    if (employerDocs.size > 0) {\n      const employerIds = employerDocs.docs.map(doc => doc.id);\n      const employerNames = employerDocs.docs.map(doc => doc.data().displayName);\n      \n      for (let i = 0; i < sampleJobs.length; i++) {\n        const job = sampleJobs[i];\n        const employerIndex = i % employerIds.length;\n        \n        await addDoc(collection(db, 'jobs'), {\n          ...job,\n          employerId: employerIds[employerIndex],\n          employerName: employerNames[employerIndex],\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now(),\n          applicants: []\n        });\n        \n        console.log(`✅ Job created: ${job.title}`);\n      }\n    }\n\n    // Create certifications\n    console.log('📚 Creating certifications...');\n    for (const cert of sampleCertifications) {\n      await addDoc(collection(db, 'certifications'), {\n        ...cert,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n      \n      console.log(`✅ Certification created: ${cert.name}`);\n    }\n\n    console.log('🎉 Database seeding completed successfully!');\n    console.log('\\n📋 Login Credentials:');\n    console.log('=====================================');\n    console.log('ADMIN:');\n    console.log(`  Email: ${adminUser.email}`);\n    console.log(`  Password: ${adminUser.password}`);\n    console.log('\\nWORKERS:');\n    sampleWorkers.forEach(w => {\n      console.log(`  ${w.displayName}: ${w.email} / ${w.password}`);\n    });\n    console.log('\\nEMPLOYERS:');\n    sampleEmployers.forEach(e => {\n      console.log(`  ${e.displayName}: ${e.email} / ${e.password}`);\n    });\n    console.log('=====================================\\n');\n    \n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n    throw error;\n  }\n};\n\n// Simplified seed function for demo data (without auth)\nexport const seedDemoData = async () => {\n  const results = {\n    workers: 0,\n    jobs: 0,\n    certifications: 0,\n    errors: [] as string[]\n  };\n\n  try {\n    console.log('🌱 Starting demo data seeding...');\n    \n    // Add worker profiles directly (without auth)\n    console.log('👷 Creating demo workers...');\n    for (let i = 0; i < sampleWorkers.length; i++) {\n      try {\n        const worker = sampleWorkers[i];\n        // Generate a unique userId for demo purposes with index to ensure uniqueness\n        const fakeUserId = `demo_worker_${i}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        \n        // Convert Trade enum values to strings and prepare data\n        const workerData = {\n          userId: fakeUserId,\n          email: worker.email,\n          name: worker.profile.name,\n          trade: worker.profile.trade, // This is already a string value from the enum\n          secondaryTrades: worker.profile.secondaryTrades || [],\n          experience: worker.profile.experience,\n          location: worker.profile.location,\n          bio: worker.profile.bio,\n          certifications: worker.profile.certifications.map(cert => ({\n            ...cert,\n            issueDate: Timestamp.fromDate(cert.issueDate),\n            expiryDate: 'expiryDate' in cert && cert.expiryDate ? Timestamp.fromDate(cert.expiryDate) : null\n          })),\n          rating: worker.profile.rating,\n          totalRatings: worker.profile.totalRatings,\n          available: worker.profile.available,\n          skills: (worker.profile as any).skills || [],\n          preferredAreas: (worker.profile as any).preferredAreas || [],\n          displayName: worker.displayName,\n          phone: worker.phone,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        };\n        \n        await addDoc(collection(db, 'workerProfiles'), workerData);\n        \n        console.log(`✅ Demo worker created: ${worker.displayName}`);\n        results.workers++;\n        // Small delay to ensure unique timestamps\n        await new Promise(resolve => setTimeout(resolve, 50));\n      } catch (error) {\n        console.error(`❌ Error creating worker ${i}:`, error);\n        results.errors.push(`Worker ${i}: ${error}`);\n      }\n    }\n\n    // Add jobs directly\n    console.log('💼 Creating demo job postings...');\n    for (let i = 0; i < sampleJobs.length; i++) {\n      try {\n        const job = sampleJobs[i];\n        const jobData = {\n          title: job.title,\n          description: job.description,\n          trade: job.trade, // This is already a string value from the enum\n          salary: job.salary,\n          duration: job.duration,\n          location: job.location,\n          requirements: job.requirements,\n          status: job.status,\n          employerId: `demo_employer_${Math.random().toString(36).substr(2, 9)}`,\n          employerName: sampleEmployers[Math.floor(Math.random() * sampleEmployers.length)].displayName,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now(),\n          applicants: [],\n          views: Math.floor(Math.random() * 100) + 10,\n          saves: Math.floor(Math.random() * 20)\n        };\n        \n        await addDoc(collection(db, 'jobs'), jobData);\n        \n        console.log(`✅ Demo job created: ${job.title}`);\n        results.jobs++;\n        await new Promise(resolve => setTimeout(resolve, 50));\n      } catch (error) {\n        console.error(`❌ Error creating job ${i}:`, error);\n        results.errors.push(`Job ${i}: ${error}`);\n      }\n    }\n\n    // Add certifications\n    console.log('📚 Creating demo certifications...');\n    for (let i = 0; i < sampleCertifications.length; i++) {\n      try {\n        const cert = sampleCertifications[i];\n        await addDoc(collection(db, 'certifications'), {\n          ...cert,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n        console.log(`✅ Demo certification created: ${cert.name}`);\n        results.certifications++;\n      } catch (error) {\n        console.error(`❌ Error creating certification ${i}:`, error);\n        results.errors.push(`Certification ${i}: ${error}`);\n      }\n    }\n\n    // Add success stories\n    console.log('⭐ Creating success stories...');\n    const successStories = [\n      {\n        name: 'Antonio Murrieta',\n        initials: 'AM',\n        role: 'Barista',\n        company: 'LVMH',\n        testimonial: 'Gracias a Doom tengo un trabajo que amo.',\n        rating: 5,\n        verified: true,\n        order: 1\n      },\n      {\n        name: 'María González',\n        initials: 'MG',\n        role: 'Chef Ejecutiva',\n        company: 'Hotel Four Seasons',\n        testimonial: 'DOOM me conectó con oportunidades que nunca imaginé. Ahora dirijo la cocina de un hotel 5 estrellas.',\n        rating: 5,\n        verified: true,\n        order: 2\n      },\n      {\n        name: 'Carlos Ramírez',\n        initials: 'CR',\n        role: 'Supervisor de Seguridad',\n        company: 'Estadio Azteca',\n        testimonial: 'De guardia de seguridad a supervisor del Estadio Azteca para el Mundial. DOOM cambió mi vida.',\n        rating: 5,\n        verified: true,\n        order: 3\n      }\n    ];\n\n    for (const story of successStories) {\n      try {\n        await addDoc(collection(db, 'successStories'), {\n          ...story,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        console.log(`✅ Success story created: ${story.name}`);\n      } catch (error) {\n        console.error(`❌ Error creating success story:`, error);\n      }\n    }\n\n    // Add weekly story\n    console.log('📅 Creating weekly story...');\n    try {\n      const weeklyStory = {\n        name: 'Roberto Hernández',\n        initials: 'RH',\n        beforeTitle: 'Mesero',\n        afterTitle: 'Gerente de Restaurante',\n        story: 'Empecé como mesero hace 2 años. Con las capacitaciones de DOOM y mi dedicación, ahora soy gerente. El Mundial 2026 será mi gran oportunidad.',\n        beforeSalary: 8000,\n        afterSalary: 25000,\n        jobsCompleted: 156,\n        rating: 4.9,\n        timeFrame: 'En solo 2 años',\n        isActive: true,\n        weekStartDate: Timestamp.now()\n      };\n      \n      await addDoc(collection(db, 'weeklyStories'), {\n        ...weeklyStory,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n      console.log('✅ Weekly story created');\n    } catch (error) {\n      console.error('❌ Error creating weekly story:', error);\n    }\n\n    console.log('🎉 Demo data seeding completed!');\n    console.log(`✅ Workers created: ${results.workers}`);\n    console.log(`✅ Jobs created: ${results.jobs}`);\n    console.log(`✅ Certifications created: ${results.certifications}`);\n    if (results.errors.length > 0) {\n      console.log(`⚠️ Errors encountered: ${results.errors.length}`);\n      results.errors.forEach(err => console.error(err));\n    }\n    \n    return { \n      success: true, \n      message: `Datos agregados: ${results.workers} trabajadores, ${results.jobs} empleos, ${results.certifications} certificaciones`,\n      results \n    };\n    \n  } catch (error) {\n    console.error('❌ Error seeding demo data:', error);\n    throw error;\n  }\n};\n\n// Function to clear all data (use with caution!)\nexport const clearDatabase = async () => {\n  const collections = ['users', 'workerProfiles', 'employerProfiles', 'jobs', 'certifications', 'certificationEnrollments', 'applications'];\n  \n  for (const collectionName of collections) {\n    const snapshot = await getDocs(collection(db, collectionName));\n    for (const doc of snapshot.docs) {\n      await deleteDoc(doc.ref);\n    }\n    console.log(`Cleared collection: ${collectionName}`);\n  }\n};"],"names":["Trade","sampleWorkers","email","password","displayName","phone","profile","name","trade","COOK","secondaryTrades","WAITER","experience","location","bio","certifications","id","type","issuer","issueDate","Date","verified","rating","totalRatings","available","skills","preferredAreas","BARTENDER","SECURITY","DRIVER","expiryDate","CLEANER","TRANSLATOR","GUIDE","sampleEmployers","companyName","contactName","businessType","description","sampleJobs","title","salary","amount","period","duration","requirements","status","sampleCertifications","provider","category","price","isFree","benefits","level","maxStudents","currentStudents","online","certificateType","seedDemoData","async","results","workers","jobs","errors","console","log","i","length","worker","workerData","userId","concat","now","Math","random","toString","substr","map","cert","_objectSpread","Timestamp","fromDate","createdAt","updatedAt","addDoc","collection","db","Promise","resolve","setTimeout","error","push","job","jobData","employerId","employerName","floor","applicants","views","saves","successStories","initials","role","company","testimonial","order","story","weeklyStory","beforeTitle","afterTitle","beforeSalary","afterSalary","jobsCompleted","timeFrame","isActive","weekStartDate","forEach","err","success","message","clearDatabase","collections","collectionName","snapshot","getDocs","doc","docs","deleteDoc","ref"],"sourceRoot":""}