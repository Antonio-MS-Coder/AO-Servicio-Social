{"version":3,"file":"static/js/3856.b8d32630.chunk.js","mappings":"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","sources":["pages/employer/ApplicationsReview.tsx","components/chat/ChatDialog.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  Button,\n  Chip,\n  Grid,\n  TextField,\n  MenuItem,\n  InputAdornment,\n  IconButton,\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Checkbox,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Tabs,\n  Tab,\n  Badge,\n  Tooltip,\n  Rating,\n  Divider,\n  FormGroup,\n  FormControlLabel,\n  Slider,\n  ToggleButton,\n  ToggleButtonGroup,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TablePagination\n} from '@mui/material';\nimport {\n  Search,\n  FilterList,\n  Sort,\n  ViewList,\n  ViewModule,\n  Person,\n  Email,\n  Phone,\n  LocationOn,\n  Work,\n  Star,\n  Schedule,\n  CheckCircle,\n  Cancel,\n  HourglassEmpty,\n  Download,\n  Print,\n  Share,\n  Compare,\n  Message,\n  CalendarToday,\n  Note,\n  Verified,\n  School,\n  AttachMoney,\n  Groups,\n  ThumbUp,\n  ThumbDown,\n  FolderOpen\n} from '@mui/icons-material';\nimport { \n  collection, \n  query, \n  where, \n  getDocs, \n  doc,\n  updateDoc,\n  getDoc,\n  Timestamp,\n  writeBatch\n} from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { JobApplication, JobPosting, WorkerProfile } from '../../types';\nimport ChatDialog from '../../components/chat/ChatDialog';\n\ninterface ApplicationFilters {\n  status: 'all' | 'pending' | 'accepted' | 'rejected' | 'shortlisted';\n  experience: [number, number];\n  rating: number;\n  hasMessage: boolean;\n  hasCertifications: boolean;\n  sortBy: 'newest' | 'oldest' | 'rating' | 'experience' | 'name';\n  searchTerm: string;\n  jobId: string | 'all';\n}\n\ninterface ExtendedApplication extends JobApplication {\n  workerProfile?: WorkerProfile;\n  isShortlisted?: boolean;\n  notes?: string;\n  interviewDate?: Date;\n  score?: number;\n}\n\ntype ViewMode = 'list' | 'grid' | 'table';\n\nconst ApplicationsReview: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { jobId } = useParams<{ jobId: string }>();\n  const { currentUser } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [applications, setApplications] = useState<ExtendedApplication[]>([]);\n  const [jobs, setJobs] = useState<JobPosting[]>([]);\n  const [selectedJob, setSelectedJob] = useState<JobPosting | null>(null);\n  const [selectedApplications, setSelectedApplications] = useState<string[]>([]);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [viewMode, setViewMode] = useState<ViewMode>('list');\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [filters, setFilters] = useState<ApplicationFilters>({\n    status: 'all',\n    experience: [0, 20],\n    rating: 0,\n    hasMessage: false,\n    hasCertifications: false,\n    sortBy: 'newest',\n    searchTerm: '',\n    jobId: jobId || 'all'\n  });\n  const [bulkActionDialogOpen, setBulkActionDialogOpen] = useState(false);\n  const [bulkAction, setBulkAction] = useState<'accept' | 'reject' | 'shortlist' | null>(null);\n  const [compareDialogOpen, setCompareDialogOpen] = useState(false);\n  const [chatDialogOpen, setChatDialogOpen] = useState(false);\n  const [selectedWorker, setSelectedWorker] = useState<{ id: string; name: string; photo?: string } | null>(null);\n  const [notesDialogOpen, setNotesDialogOpen] = useState(false);\n  const [selectedAppForNotes, setSelectedAppForNotes] = useState<ExtendedApplication | null>(null);\n  const [notes, setNotes] = useState('');\n\n  useEffect(() => {\n    if (currentUser) {\n      fetchApplications();\n    }\n  }, [currentUser, jobId]);\n\n  const fetchApplications = async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    try {\n      // Fetch employer's jobs\n      const jobsQuery = query(\n        collection(db, 'jobs'),\n        where('employerId', '==', currentUser.uid)\n      );\n      const jobsSnapshot = await getDocs(jobsQuery);\n      const jobsList = jobsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as JobPosting[];\n      setJobs(jobsList);\n\n      // Set selected job if jobId is provided\n      if (jobId) {\n        const job = jobsList.find(j => j.id === jobId);\n        setSelectedJob(job || null);\n      }\n\n      // Fetch applications\n      let appsQuery;\n      if (jobId) {\n        appsQuery = query(\n          collection(db, 'applications'),\n          where('jobId', '==', jobId)\n        );\n      } else {\n        const jobIds = jobsList.map(j => j.id);\n        if (jobIds.length === 0) {\n          setApplications([]);\n          setLoading(false);\n          return;\n        }\n        \n        // Batch query for all job applications\n        const allApps: ExtendedApplication[] = [];\n        const batchSize = 10;\n        for (let i = 0; i < jobIds.length; i += batchSize) {\n          const batch = jobIds.slice(i, i + batchSize);\n          const batchQuery = query(\n            collection(db, 'applications'),\n            where('jobId', 'in', batch)\n          );\n          const batchSnapshot = await getDocs(batchQuery);\n          batchSnapshot.docs.forEach(doc => {\n            allApps.push({\n              id: doc.id,\n              ...doc.data()\n            } as ExtendedApplication);\n          });\n        }\n        \n        // Fetch worker profiles for each application\n        for (const app of allApps) {\n          try {\n            const workerDoc = await getDoc(doc(db, 'workers', app.workerId));\n            if (workerDoc.exists()) {\n              app.workerProfile = workerDoc.data() as WorkerProfile;\n            }\n          } catch (error) {\n            console.error('Error fetching worker profile:', error);\n          }\n        }\n        \n        setApplications(allApps);\n      }\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBulkAction = async () => {\n    if (!bulkAction || selectedApplications.length === 0) return;\n    \n    try {\n      const batch = writeBatch(db);\n      \n      selectedApplications.forEach(appId => {\n        const appRef = doc(db, 'applications', appId);\n        if (bulkAction === 'shortlist') {\n          batch.update(appRef, {\n            isShortlisted: true,\n            updatedAt: Timestamp.now()\n          });\n        } else {\n          batch.update(appRef, {\n            status: bulkAction === 'accept' ? 'accepted' : 'rejected',\n            updatedAt: Timestamp.now()\n          });\n        }\n      });\n      \n      await batch.commit();\n      \n      // Update local state\n      setApplications(applications.map(app => {\n        if (selectedApplications.includes(app.id)) {\n          if (bulkAction === 'shortlist') {\n            return { ...app, isShortlisted: true };\n          } else {\n            return { ...app, status: bulkAction === 'accept' ? 'accepted' : 'rejected' };\n          }\n        }\n        return app;\n      }));\n      \n      setSelectedApplications([]);\n      setBulkActionDialogOpen(false);\n      setBulkAction(null);\n    } catch (error) {\n      console.error('Error performing bulk action:', error);\n    }\n  };\n\n  const handleStatusChange = async (appId: string, newStatus: 'accepted' | 'rejected' | 'pending') => {\n    try {\n      await updateDoc(doc(db, 'applications', appId), {\n        status: newStatus,\n        updatedAt: Timestamp.now()\n      });\n      \n      setApplications(applications.map(app => \n        app.id === appId ? { ...app, status: newStatus } : app\n      ));\n    } catch (error) {\n      console.error('Error updating application status:', error);\n    }\n  };\n\n  const handleSaveNotes = async () => {\n    if (!selectedAppForNotes) return;\n    \n    try {\n      await updateDoc(doc(db, 'applications', selectedAppForNotes.id), {\n        notes,\n        updatedAt: Timestamp.now()\n      });\n      \n      setApplications(applications.map(app => \n        app.id === selectedAppForNotes.id ? { ...app, notes } : app\n      ));\n      \n      setNotesDialogOpen(false);\n      setSelectedAppForNotes(null);\n      setNotes('');\n    } catch (error) {\n      console.error('Error saving notes:', error);\n    }\n  };\n\n  const getFilteredApplications = () => {\n    let filtered = [...applications];\n    \n    // Job filter\n    if (filters.jobId !== 'all') {\n      filtered = filtered.filter(app => app.jobId === filters.jobId);\n    }\n    \n    // Status filter\n    if (filters.status !== 'all') {\n      if (filters.status === 'shortlisted') {\n        filtered = filtered.filter(app => app.isShortlisted);\n      } else {\n        filtered = filtered.filter(app => app.status === filters.status);\n      }\n    }\n    \n    // Experience filter\n    filtered = filtered.filter(app => {\n      const exp = app.workerProfile?.experience || 0;\n      return exp >= filters.experience[0] && exp <= filters.experience[1];\n    });\n    \n    // Rating filter\n    if (filters.rating > 0) {\n      filtered = filtered.filter(app => \n        (app.workerProfile?.rating || 0) >= filters.rating\n      );\n    }\n    \n    // Has message filter\n    if (filters.hasMessage) {\n      filtered = filtered.filter(app => app.coverLetter && app.coverLetter.length > 0);\n    }\n    \n    // Has certifications filter\n    if (filters.hasCertifications) {\n      filtered = filtered.filter(app => \n        app.workerProfile?.certifications && app.workerProfile.certifications.length > 0\n      );\n    }\n    \n    // Search filter\n    if (filters.searchTerm) {\n      const searchLower = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(app => \n        app.workerName.toLowerCase().includes(searchLower) ||\n        app.coverLetter?.toLowerCase().includes(searchLower) ||\n        app.workerProfile?.bio?.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    // Sorting\n    filtered.sort((a, b) => {\n      switch (filters.sortBy) {\n        case 'newest':\n          return (b.appliedAt?.toDate?.() || new Date()).getTime() - \n                 (a.appliedAt?.toDate?.() || new Date()).getTime();\n        case 'oldest':\n          return (a.appliedAt?.toDate?.() || new Date()).getTime() - \n                 (b.appliedAt?.toDate?.() || new Date()).getTime();\n        case 'rating':\n          return (b.workerProfile?.rating || 0) - (a.workerProfile?.rating || 0);\n        case 'experience':\n          return (b.workerProfile?.experience || 0) - (a.workerProfile?.experience || 0);\n        case 'name':\n          return a.workerName.localeCompare(b.workerName);\n        default:\n          return 0;\n      }\n    });\n    \n    return filtered;\n  };\n\n  const getApplicationsByStatus = () => {\n    const all = getFilteredApplications();\n    const pending = all.filter(app => app.status === 'pending');\n    const accepted = all.filter(app => app.status === 'accepted');\n    const rejected = all.filter(app => app.status === 'rejected');\n    const shortlisted = all.filter(app => app.isShortlisted);\n    \n    return { all, pending, accepted, rejected, shortlisted };\n  };\n\n  const appsByStatus = getApplicationsByStatus();\n  const displayApps = selectedTab === 0 ? appsByStatus.all :\n                      selectedTab === 1 ? appsByStatus.pending :\n                      selectedTab === 2 ? appsByStatus.shortlisted :\n                      selectedTab === 3 ? appsByStatus.accepted :\n                      appsByStatus.rejected;\n\n  const handleExport = () => {\n    // Create CSV content\n    const headers = ['Nombre', 'Email', 'Teléfono', 'Experiencia', 'Calificación', 'Estado', 'Fecha de Aplicación'];\n    const rows = displayApps.map(app => [\n      app.workerName,\n      app.workerProfile?.userId || '',\n      '', // Phone placeholder\n      app.workerProfile?.experience || 0,\n      app.workerProfile?.rating || 0,\n      app.status,\n      app.appliedAt?.toDate?.().toLocaleDateString('es-MX') || ''\n    ]);\n    \n    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\n');\n    \n    // Download CSV\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `applications-${new Date().toISOString()}.csv`;\n    a.click();\n  };\n\n  if (loading) {\n    return (\n      <Container sx={{ py: 4, textAlign: 'center' }}>\n        <CircularProgress />\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={4}>\n        <Typography variant=\"h4\">\n          Revisar Aplicaciones\n        </Typography>\n        <Box display=\"flex\" gap={2}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Download />}\n            onClick={handleExport}\n          >\n            Exportar\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Print />}\n            onClick={() => window.print()}\n          >\n            Imprimir\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<Compare />}\n            onClick={() => setCompareDialogOpen(true)}\n            disabled={selectedApplications.length < 2}\n          >\n            Comparar ({selectedApplications.length})\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs={12} md={3}>\n            <TextField\n              fullWidth\n              placeholder=\"Buscar por nombre o mensaje...\"\n              value={filters.searchTerm}\n              onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Search />\n                  </InputAdornment>\n                )\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <TextField\n              fullWidth\n              select\n              label=\"Trabajo\"\n              value={filters.jobId}\n              onChange={(e) => setFilters({ ...filters, jobId: e.target.value })}\n            >\n              <MenuItem value=\"all\">Todos los trabajos</MenuItem>\n              {jobs.map(job => (\n                <MenuItem key={job.id} value={job.id}>\n                  {job.title}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <TextField\n              fullWidth\n              select\n              label=\"Estado\"\n              value={filters.status}\n              onChange={(e) => setFilters({ ...filters, status: e.target.value as any })}\n            >\n              <MenuItem value=\"all\">Todos</MenuItem>\n              <MenuItem value=\"pending\">Pendientes</MenuItem>\n              <MenuItem value=\"shortlisted\">Preseleccionados</MenuItem>\n              <MenuItem value=\"accepted\">Aceptados</MenuItem>\n              <MenuItem value=\"rejected\">Rechazados</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <TextField\n              fullWidth\n              select\n              label=\"Ordenar por\"\n              value={filters.sortBy}\n              onChange={(e) => setFilters({ ...filters, sortBy: e.target.value as any })}\n            >\n              <MenuItem value=\"newest\">Más recientes</MenuItem>\n              <MenuItem value=\"oldest\">Más antiguos</MenuItem>\n              <MenuItem value=\"rating\">Calificación</MenuItem>\n              <MenuItem value=\"experience\">Experiencia</MenuItem>\n              <MenuItem value=\"name\">Nombre</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12} md={1}>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={filters.hasMessage}\n                    onChange={(e) => setFilters({ ...filters, hasMessage: e.target.checked })}\n                  />\n                }\n                label=\"Con mensaje\"\n              />\n            </FormGroup>\n          </Grid>\n          <Grid item xs={12} md={1}>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={filters.hasCertifications}\n                    onChange={(e) => setFilters({ ...filters, hasCertifications: e.target.checked })}\n                  />\n                }\n                label=\"Certificados\"\n              />\n            </FormGroup>\n          </Grid>\n          <Grid item xs={12} md={1}>\n            <ToggleButtonGroup\n              value={viewMode}\n              exclusive\n              onChange={(e, v) => v && setViewMode(v)}\n              size=\"small\"\n            >\n              <ToggleButton value=\"list\">\n                <ViewList />\n              </ToggleButton>\n              <ToggleButton value=\"grid\">\n                <ViewModule />\n              </ToggleButton>\n              <ToggleButton value=\"table\">\n                <FolderOpen />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Grid>\n        \n        {/* Advanced Filters */}\n        <Box sx={{ mt: 2 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            Experiencia: {filters.experience[0]} - {filters.experience[1]} años\n          </Typography>\n          <Slider\n            value={filters.experience}\n            onChange={(e, v) => setFilters({ ...filters, experience: v as [number, number] })}\n            valueLabelDisplay=\"auto\"\n            min={0}\n            max={20}\n            marks={[\n              { value: 0, label: '0' },\n              { value: 5, label: '5' },\n              { value: 10, label: '10' },\n              { value: 15, label: '15' },\n              { value: 20, label: '20+' }\n            ]}\n          />\n          \n          <Box display=\"flex\" alignItems=\"center\" gap={2} mt={2}>\n            <Typography variant=\"body2\">Calificación mínima:</Typography>\n            <Rating\n              value={filters.rating}\n              onChange={(e, v) => setFilters({ ...filters, rating: v || 0 })}\n            />\n            {filters.rating > 0 && (\n              <Button \n                size=\"small\" \n                onClick={() => setFilters({ ...filters, rating: 0 })}\n              >\n                Limpiar\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Paper>\n\n      {/* Bulk Actions */}\n      {selectedApplications.length > 0 && (\n        <Paper sx={{ p: 2, mb: 2 }}>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography>\n              {selectedApplications.length} aplicaciones seleccionadas\n            </Typography>\n            <Box display=\"flex\" gap={2}>\n              <Button\n                variant=\"contained\"\n                color=\"success\"\n                startIcon={<ThumbUp />}\n                onClick={() => {\n                  setBulkAction('accept');\n                  setBulkActionDialogOpen(true);\n                }}\n              >\n                Aceptar\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                startIcon={<ThumbDown />}\n                onClick={() => {\n                  setBulkAction('reject');\n                  setBulkActionDialogOpen(true);\n                }}\n              >\n                Rechazar\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"warning\"\n                startIcon={<Star />}\n                onClick={() => {\n                  setBulkAction('shortlist');\n                  setBulkActionDialogOpen(true);\n                }}\n              >\n                Preseleccionar\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setSelectedApplications([])}\n              >\n                Limpiar selección\n              </Button>\n            </Box>\n          </Box>\n        </Paper>\n      )}\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs value={selectedTab} onChange={(e, v) => setSelectedTab(v)}>\n          <Tab \n            label={\n              <Badge badgeContent={appsByStatus.all.length} color=\"primary\">\n                <Box sx={{ pr: 2 }}>Todas</Box>\n              </Badge>\n            } \n          />\n          <Tab \n            label={\n              <Badge badgeContent={appsByStatus.pending.length} color=\"warning\">\n                <Box sx={{ pr: 2 }}>Pendientes</Box>\n              </Badge>\n            } \n          />\n          <Tab \n            label={\n              <Badge badgeContent={appsByStatus.shortlisted.length} color=\"info\">\n                <Box sx={{ pr: 2 }}>Preseleccionadas</Box>\n              </Badge>\n            } \n          />\n          <Tab \n            label={\n              <Badge badgeContent={appsByStatus.accepted.length} color=\"success\">\n                <Box sx={{ pr: 2 }}>Aceptadas</Box>\n              </Badge>\n            } \n          />\n          <Tab \n            label={\n              <Badge badgeContent={appsByStatus.rejected.length} color=\"error\">\n                <Box sx={{ pr: 2 }}>Rechazadas</Box>\n              </Badge>\n            } \n          />\n        </Tabs>\n      </Paper>\n\n      {/* Applications Display */}\n      {displayApps.length === 0 ? (\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            No hay aplicaciones para mostrar\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {filters.searchTerm || filters.status !== 'all' \n              ? 'Intenta ajustar tus filtros de búsqueda'\n              : 'Las nuevas aplicaciones aparecerán aquí'}\n          </Typography>\n        </Paper>\n      ) : (\n        <>\n          {viewMode === 'list' && (\n            <List>\n              {displayApps.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((app) => (\n                <Card key={app.id} sx={{ mb: 2 }}>\n                  <ListItem>\n                    <Checkbox\n                      checked={selectedApplications.includes(app.id)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedApplications([...selectedApplications, app.id]);\n                        } else {\n                          setSelectedApplications(selectedApplications.filter(id => id !== app.id));\n                        }\n                      }}\n                    />\n                    <ListItemAvatar>\n                      <Avatar src={app.workerPhoto} sx={{ width: 56, height: 56 }}>\n                        <Person />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography variant=\"h6\">{app.workerName}</Typography>\n                          {app.isShortlisted && (\n                            <Chip \n                              size=\"small\" \n                              label=\"Preseleccionado\" \n                              color=\"warning\"\n                              icon={<Star />}\n                            />\n                          )}\n                          <Chip \n                            size=\"small\" \n                            label={app.status}\n                            color={\n                              app.status === 'pending' ? 'default' :\n                              app.status === 'accepted' ? 'success' :\n                              'error'\n                            }\n                          />\n                        </Box>\n                      }\n                      secondary={\n                        <Box sx={{ mt: 1 }}>\n                          <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                                <Work fontSize=\"small\" />\n                                <Typography variant=\"body2\">\n                                  {app.workerProfile?.trade} • {app.workerProfile?.experience || 0} años exp.\n                                </Typography>\n                              </Box>\n                              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                                <LocationOn fontSize=\"small\" />\n                                <Typography variant=\"body2\">\n                                  {app.workerProfile?.location || 'No especificado'}\n                                </Typography>\n                              </Box>\n                              {app.workerProfile?.rating && (\n                                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                                  <Rating value={app.workerProfile.rating} readOnly size=\"small\" />\n                                  <Typography variant=\"body2\">\n                                    ({app.workerProfile.totalRatings} reseñas)\n                                  </Typography>\n                                </Box>\n                              )}\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                              {app.coverLetter && (\n                                <Box mb={1}>\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    \"{app.coverLetter}\"\n                                  </Typography>\n                                </Box>\n                              )}\n                              <Typography variant=\"caption\" color=\"text.secondary\">\n                                Aplicó: {app.appliedAt?.toDate?.().toLocaleDateString('es-MX')}\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                          \n                          <Box display=\"flex\" gap={1} mt={2}>\n                            <Button\n                              size=\"small\"\n                              variant=\"contained\"\n                              color=\"success\"\n                              startIcon={<CheckCircle />}\n                              onClick={() => handleStatusChange(app.id, 'accepted')}\n                              disabled={app.status === 'accepted'}\n                            >\n                              Aceptar\n                            </Button>\n                            <Button\n                              size=\"small\"\n                              variant=\"contained\"\n                              color=\"error\"\n                              startIcon={<Cancel />}\n                              onClick={() => handleStatusChange(app.id, 'rejected')}\n                              disabled={app.status === 'rejected'}\n                            >\n                              Rechazar\n                            </Button>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              startIcon={<Message />}\n                              onClick={() => {\n                                setSelectedWorker({\n                                  id: app.workerId,\n                                  name: app.workerName,\n                                  photo: app.workerPhoto\n                                });\n                                setChatDialogOpen(true);\n                              }}\n                            >\n                              Mensaje\n                            </Button>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              startIcon={<CalendarToday />}\n                            >\n                              Agendar\n                            </Button>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              startIcon={<Note />}\n                              onClick={() => {\n                                setSelectedAppForNotes(app);\n                                setNotes(app.notes || '');\n                                setNotesDialogOpen(true);\n                              }}\n                            >\n                              Notas\n                            </Button>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              onClick={() => navigate(`/workers/${app.workerId}`)}\n                            >\n                              Ver Perfil\n                            </Button>\n                          </Box>\n                        </Box>\n                      }\n                    />\n                  </ListItem>\n                </Card>\n              ))}\n            </List>\n          )}\n\n          {viewMode === 'grid' && (\n            <Grid container spacing={3}>\n              {displayApps.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((app) => (\n                <Grid item xs={12} sm={6} md={4} key={app.id}>\n                  <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                    <CardContent sx={{ flex: 1 }}>\n                      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\" mb={2}>\n                        <Checkbox\n                          checked={selectedApplications.includes(app.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedApplications([...selectedApplications, app.id]);\n                            } else {\n                              setSelectedApplications(selectedApplications.filter(id => id !== app.id));\n                            }\n                          }}\n                        />\n                        <Avatar src={app.workerPhoto} sx={{ width: 64, height: 64 }}>\n                          <Person />\n                        </Avatar>\n                        <Box>\n                          {app.isShortlisted && (\n                            <Tooltip title=\"Preseleccionado\">\n                              <Star sx={{ color: 'warning.main' }} />\n                            </Tooltip>\n                          )}\n                        </Box>\n                      </Box>\n                      \n                      <Typography variant=\"h6\" gutterBottom>\n                        {app.workerName}\n                      </Typography>\n                      \n                      <Chip \n                        size=\"small\" \n                        label={app.status}\n                        color={\n                          app.status === 'pending' ? 'default' :\n                          app.status === 'accepted' ? 'success' :\n                          'error'\n                        }\n                        sx={{ mb: 2 }}\n                      />\n                      \n                      <Box mb={1}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {app.workerProfile?.trade} • {app.workerProfile?.experience || 0} años\n                        </Typography>\n                      </Box>\n                      \n                      {app.workerProfile?.rating && (\n                        <Box display=\"flex\" alignItems=\"center\" gap={0.5} mb={1}>\n                          <Rating value={app.workerProfile.rating} readOnly size=\"small\" />\n                          <Typography variant=\"caption\">\n                            ({app.workerProfile.totalRatings})\n                          </Typography>\n                        </Box>\n                      )}\n                      \n                      {app.coverLetter && (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ \n                          mb: 1,\n                          overflow: 'hidden',\n                          textOverflow: 'ellipsis',\n                          display: '-webkit-box',\n                          WebkitLineClamp: 2,\n                          WebkitBoxOrient: 'vertical'\n                        }}>\n                          \"{app.coverLetter}\"\n                        </Typography>\n                      )}\n                      \n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {app.appliedAt?.toDate?.().toLocaleDateString('es-MX')}\n                      </Typography>\n                    </CardContent>\n                    \n                    <Box sx={{ p: 2, pt: 0, display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                      <IconButton \n                        color=\"success\"\n                        onClick={() => handleStatusChange(app.id, 'accepted')}\n                        disabled={app.status === 'accepted'}\n                      >\n                        <CheckCircle />\n                      </IconButton>\n                      <IconButton \n                        color=\"error\"\n                        onClick={() => handleStatusChange(app.id, 'rejected')}\n                        disabled={app.status === 'rejected'}\n                      >\n                        <Cancel />\n                      </IconButton>\n                      <IconButton \n                        color=\"primary\"\n                        onClick={() => {\n                          setSelectedWorker({\n                            id: app.workerId,\n                            name: app.workerName,\n                            photo: app.workerPhoto\n                          });\n                          setChatDialogOpen(true);\n                        }}\n                      >\n                        <Message />\n                      </IconButton>\n                      <IconButton onClick={() => navigate(`/workers/${app.workerId}`)}>\n                        <Person />\n                      </IconButton>\n                    </Box>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          )}\n\n          {viewMode === 'table' && (\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        indeterminate={selectedApplications.length > 0 && selectedApplications.length < displayApps.length}\n                        checked={displayApps.length > 0 && selectedApplications.length === displayApps.length}\n                        onChange={(e) => {\n                          if (e.target.checked) {\n                            setSelectedApplications(displayApps.map(app => app.id));\n                          } else {\n                            setSelectedApplications([]);\n                          }\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>Candidato</TableCell>\n                    <TableCell>Experiencia</TableCell>\n                    <TableCell>Calificación</TableCell>\n                    <TableCell>Estado</TableCell>\n                    <TableCell>Fecha</TableCell>\n                    <TableCell>Acciones</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {displayApps.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((app) => (\n                    <TableRow key={app.id}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={selectedApplications.includes(app.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedApplications([...selectedApplications, app.id]);\n                            } else {\n                              setSelectedApplications(selectedApplications.filter(id => id !== app.id));\n                            }\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Avatar src={app.workerPhoto} sx={{ width: 32, height: 32 }}>\n                            <Person />\n                          </Avatar>\n                          <Box>\n                            <Typography variant=\"body2\">{app.workerName}</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {app.workerProfile?.trade}\n                            </Typography>\n                          </Box>\n                          {app.isShortlisted && (\n                            <Star sx={{ color: 'warning.main', fontSize: 16 }} />\n                          )}\n                        </Box>\n                      </TableCell>\n                      <TableCell>{app.workerProfile?.experience || 0} años</TableCell>\n                      <TableCell>\n                        {app.workerProfile?.rating ? (\n                          <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                            <Rating value={app.workerProfile.rating} readOnly size=\"small\" />\n                            <Typography variant=\"caption\">\n                              ({app.workerProfile.totalRatings})\n                            </Typography>\n                          </Box>\n                        ) : '-'}\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          size=\"small\" \n                          label={app.status}\n                          color={\n                            app.status === 'pending' ? 'default' :\n                            app.status === 'accepted' ? 'success' :\n                            'error'\n                          }\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {app.appliedAt?.toDate?.().toLocaleDateString('es-MX')}\n                      </TableCell>\n                      <TableCell>\n                        <Box display=\"flex\" gap={1}>\n                          <IconButton \n                            size=\"small\"\n                            color=\"success\"\n                            onClick={() => handleStatusChange(app.id, 'accepted')}\n                            disabled={app.status === 'accepted'}\n                          >\n                            <CheckCircle fontSize=\"small\" />\n                          </IconButton>\n                          <IconButton \n                            size=\"small\"\n                            color=\"error\"\n                            onClick={() => handleStatusChange(app.id, 'rejected')}\n                            disabled={app.status === 'rejected'}\n                          >\n                            <Cancel fontSize=\"small\" />\n                          </IconButton>\n                          <IconButton \n                            size=\"small\"\n                            color=\"primary\"\n                            onClick={() => {\n                              setSelectedWorker({\n                                id: app.workerId,\n                                name: app.workerName,\n                                photo: app.workerPhoto\n                              });\n                              setChatDialogOpen(true);\n                            }}\n                          >\n                            <Message fontSize=\"small\" />\n                          </IconButton>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <TablePagination\n                component=\"div\"\n                count={displayApps.length}\n                page={page}\n                onPageChange={(e, p) => setPage(p)}\n                rowsPerPage={rowsPerPage}\n                onRowsPerPageChange={(e) => {\n                  setRowsPerPage(parseInt(e.target.value, 10));\n                  setPage(0);\n                }}\n              />\n            </TableContainer>\n          )}\n        </>\n      )}\n\n      {/* Bulk Action Dialog */}\n      <Dialog open={bulkActionDialogOpen} onClose={() => setBulkActionDialogOpen(false)}>\n        <DialogTitle>\n          Confirmar Acción en Lote\n        </DialogTitle>\n        <DialogContent>\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\n            Esta acción afectará a {selectedApplications.length} aplicaciones\n          </Alert>\n          <Typography>\n            ¿Estás seguro de que deseas {\n              bulkAction === 'accept' ? 'aceptar' :\n              bulkAction === 'reject' ? 'rechazar' :\n              'preseleccionar'\n            } las aplicaciones seleccionadas?\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setBulkActionDialogOpen(false)}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleBulkAction}\n            variant=\"contained\"\n            color={\n              bulkAction === 'accept' ? 'success' :\n              bulkAction === 'reject' ? 'error' :\n              'warning'\n            }\n          >\n            Confirmar\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Notes Dialog */}\n      <Dialog open={notesDialogOpen} onClose={() => setNotesDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>\n          Notas para {selectedAppForNotes?.workerName}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            value={notes}\n            onChange={(e) => setNotes(e.target.value)}\n            placeholder=\"Escribe tus notas sobre este candidato...\"\n            sx={{ mt: 2 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setNotesDialogOpen(false)}>\n            Cancelar\n          </Button>\n          <Button onClick={handleSaveNotes} variant=\"contained\">\n            Guardar\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Chat Dialog */}\n      {selectedWorker && (\n        <ChatDialog\n          open={chatDialogOpen}\n          onClose={() => setChatDialogOpen(false)}\n          recipientId={selectedWorker.id}\n          recipientName={selectedWorker.name}\n          recipientPhoto={selectedWorker.photo}\n          jobId={jobId}\n          jobTitle={selectedJob?.title}\n        />\n      )}\n\n      {/* Compare Dialog */}\n      <Dialog open={compareDialogOpen} onClose={() => setCompareDialogOpen(false)} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>\n          Comparar Candidatos\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            {selectedApplications.map(appId => {\n              const app = applications.find(a => a.id === appId);\n              if (!app) return null;\n              \n              return (\n                <Grid item xs={12} md={6} key={appId}>\n                  <Card sx={{ p: 2 }}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                      <Avatar src={app.workerPhoto} sx={{ width: 48, height: 48 }}>\n                        <Person />\n                      </Avatar>\n                      <Box flex={1}>\n                        <Typography variant=\"h6\">{app.workerName}</Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {app.workerProfile?.trade}\n                        </Typography>\n                      </Box>\n                    </Box>\n                    \n                    <Divider sx={{ mb: 2 }} />\n                    \n                    <Grid container spacing={1}>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Experiencia\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {app.workerProfile?.experience || 0} años\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Calificación\n                        </Typography>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <Rating value={app.workerProfile?.rating || 0} readOnly size=\"small\" />\n                        </Box>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Certificaciones\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {app.workerProfile?.certifications?.length || 0}\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Disponible\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {app.workerProfile?.available ? 'Sí' : 'No'}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    \n                    {app.coverLetter && (\n                      <Box mt={2}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Carta de presentación\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          \"{app.coverLetter}\"\n                        </Typography>\n                      </Box>\n                    )}\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCompareDialogOpen(false)}>\n            Cerrar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default ApplicationsReview;","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Avatar,\n  Paper,\n  IconButton,\n  Divider,\n  CircularProgress,\n  Chip\n} from '@mui/material';\nimport {\n  Send,\n  Close,\n  AttachFile,\n  CheckCircle,\n  Schedule\n} from '@mui/icons-material';\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  addDoc, \n  serverTimestamp,\n  doc,\n  updateDoc,\n  getDocs,\n  limit\n} from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { formatDistanceToNow } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface ChatDialogProps {\n  open: boolean;\n  onClose: () => void;\n  recipientId: string;\n  recipientName: string;\n  recipientPhoto?: string;\n  jobId?: string;\n  jobTitle?: string;\n}\n\ninterface Message {\n  id: string;\n  senderId: string;\n  recipientId: string;\n  content: string;\n  timestamp: any;\n  read: boolean;\n  jobId?: string;\n}\n\nconst ChatDialog: React.FC<ChatDialogProps> = ({\n  open,\n  onClose,\n  recipientId,\n  recipientName,\n  recipientPhoto,\n  jobId,\n  jobTitle\n}) => {\n  const { currentUser } = useAuth();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!open || !currentUser) return;\n\n    setLoading(true);\n    \n    // Create conversation ID (sorted user IDs to ensure consistency)\n    const conversationId = [currentUser.uid, recipientId].sort().join('_');\n    \n    // Subscribe to messages\n    const q = query(\n      collection(db, 'messages'),\n      where('conversationId', '==', conversationId),\n      orderBy('timestamp', 'asc')\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const messageList: Message[] = [];\n      snapshot.forEach((doc) => {\n        messageList.push({ id: doc.id, ...doc.data() } as Message);\n      });\n      setMessages(messageList);\n      setLoading(false);\n      \n      // Mark messages as read\n      markMessagesAsRead();\n    });\n\n    return () => unsubscribe();\n  }, [open, currentUser, recipientId]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const markMessagesAsRead = async () => {\n    if (!currentUser) return;\n    \n    const unreadQuery = query(\n      collection(db, 'messages'),\n      where('recipientId', '==', currentUser.uid),\n      where('senderId', '==', recipientId),\n      where('read', '==', false)\n    );\n\n    const snapshot = await getDocs(unreadQuery);\n    snapshot.forEach(async (document) => {\n      await updateDoc(doc(db, 'messages', document.id), { read: true });\n    });\n  };\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !currentUser || sending) return;\n\n    setSending(true);\n    try {\n      const conversationId = [currentUser.uid, recipientId].sort().join('_');\n      \n      await addDoc(collection(db, 'messages'), {\n        conversationId,\n        senderId: currentUser.uid,\n        recipientId,\n        content: newMessage.trim(),\n        timestamp: serverTimestamp(),\n        read: false,\n        jobId: jobId || null\n      });\n\n      // Also create/update conversation document for easy listing\n      await addDoc(collection(db, 'conversations'), {\n        participants: [currentUser.uid, recipientId],\n        lastMessage: newMessage.trim(),\n        lastMessageTime: serverTimestamp(),\n        jobId: jobId || null,\n        jobTitle: jobTitle || null\n      });\n\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const formatMessageTime = (timestamp: any) => {\n    if (!timestamp) return '';\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n    return formatDistanceToNow(date, { addSuffix: true, locale: es });\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '70vh', display: 'flex', flexDirection: 'column' }\n      }}\n    >\n      <DialogTitle sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\n            <Avatar src={recipientPhoto} alt={recipientName}>\n              {recipientName[0]}\n            </Avatar>\n            <Box>\n              <Typography variant=\"h6\">{recipientName}</Typography>\n              {jobTitle && (\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {jobTitle}\n                </Typography>\n              )}\n            </Box>\n          </Box>\n          <IconButton onClick={onClose}>\n            <Close />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" p={4}>\n            <CircularProgress />\n          </Box>\n        ) : messages.length === 0 ? (\n          <Box textAlign=\"center\" p={4}>\n            <Typography color=\"text.secondary\">\n              Inicia la conversación con un mensaje\n            </Typography>\n          </Box>\n        ) : (\n          <Box>\n            {messages.map((message) => {\n              const isOwnMessage = message.senderId === currentUser?.uid;\n              return (\n                <Box\n                  key={message.id}\n                  display=\"flex\"\n                  justifyContent={isOwnMessage ? 'flex-end' : 'flex-start'}\n                  mb={2}\n                >\n                  <Paper\n                    elevation={1}\n                    sx={{\n                      p: 1.5,\n                      maxWidth: '70%',\n                      bgcolor: isOwnMessage ? 'primary.main' : 'grey.100',\n                      color: isOwnMessage ? 'white' : 'text.primary'\n                    }}\n                  >\n                    <Typography variant=\"body2\">{message.content}</Typography>\n                    <Box display=\"flex\" alignItems=\"center\" gap={0.5} mt={0.5}>\n                      <Typography \n                        variant=\"caption\" \n                        sx={{ \n                          opacity: 0.7,\n                          color: isOwnMessage ? 'white' : 'text.secondary'\n                        }}\n                      >\n                        {formatMessageTime(message.timestamp)}\n                      </Typography>\n                      {isOwnMessage && (\n                        message.read ? (\n                          <CheckCircle sx={{ fontSize: 14 }} />\n                        ) : (\n                          <Schedule sx={{ fontSize: 14 }} />\n                        )\n                      )}\n                    </Box>\n                  </Paper>\n                </Box>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          placeholder=\"Escribe un mensaje...\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleSendMessage();\n            }\n          }}\n          multiline\n          maxRows={3}\n          disabled={sending}\n          InputProps={{\n            endAdornment: (\n              <IconButton \n                onClick={handleSendMessage} \n                disabled={!newMessage.trim() || sending}\n                color=\"primary\"\n              >\n                <Send />\n              </IconButton>\n            )\n          }}\n        />\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ChatDialog;"],"names":["ApplicationsReview","t","useTranslation","navigate","useNavigate","jobId","useParams","currentUser","useAuth","loading","setLoading","useState","applications","setApplications","jobs","setJobs","selectedJob","setSelectedJob","selectedApplications","setSelectedApplications","selectedTab","setSelectedTab","viewMode","setViewMode","page","setPage","rowsPerPage","setRowsPerPage","filters","setFilters","status","experience","rating","hasMessage","hasCertifications","sortBy","searchTerm","bulkActionDialogOpen","setBulkActionDialogOpen","bulkAction","setBulkAction","compareDialogOpen","setCompareDialogOpen","chatDialogOpen","setChatDialogOpen","selectedWorker","setSelectedWorker","notesDialogOpen","setNotesDialogOpen","selectedAppForNotes","setSelectedAppForNotes","notes","setNotes","useEffect","fetchApplications","async","jobsQuery","query","collection","db","where","uid","jobsList","getDocs","docs","map","doc","_objectSpread","id","data","job","find","j","appsQuery","jobIds","length","allApps","batchSize","i","batch","slice","batchQuery","forEach","push","app","workerDoc","getDoc","workerId","exists","workerProfile","error","console","handleStatusChange","appId","newStatus","updateDoc","updatedAt","Timestamp","now","appsByStatus","getApplicationsByStatus","all","getFilteredApplications","filtered","filter","isShortlisted","_app$workerProfile","exp","_app$workerProfile2","coverLetter","_app$workerProfile3","certifications","searchLower","toLowerCase","_app$coverLetter","_app$workerProfile4","_app$workerProfile4$b","workerName","includes","bio","sort","a","b","_b$appliedAt","_b$appliedAt$toDate","_a$appliedAt","_a$appliedAt$toDate","_a$appliedAt2","_a$appliedAt2$toDate","_b$appliedAt2","_b$appliedAt2$toDate","_b$workerProfile","_a$workerProfile","_b$workerProfile2","_a$workerProfile2","appliedAt","toDate","call","Date","getTime","localeCompare","pending","accepted","rejected","shortlisted","displayApps","_jsx","Container","sx","py","textAlign","children","CircularProgress","_jsxs","maxWidth","Box","display","justifyContent","alignItems","mb","Typography","variant","gap","Button","startIcon","Download","onClick","handleExport","csvContent","_app$workerProfile5","_app$workerProfile6","_app$workerProfile7","_app$appliedAt","_app$appliedAt$toDate","userId","toLocaleDateString","row","join","blob","Blob","type","url","window","URL","createObjectURL","document","createElement","href","download","concat","toISOString","click","Print","print","Compare","disabled","Paper","p","Grid","container","spacing","item","xs","md","TextField","fullWidth","placeholder","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","Search","select","label","MenuItem","title","FormGroup","FormControlLabel","control","Checkbox","checked","ToggleButtonGroup","exclusive","v","size","ToggleButton","ViewList","ViewModule","FolderOpen","mt","gutterBottom","Slider","valueLabelDisplay","min","max","marks","Rating","color","ThumbUp","ThumbDown","Star","Tabs","Tab","Badge","badgeContent","pr","_Fragment","List","_app$workerProfile8","_app$workerProfile9","_app$workerProfile0","_app$workerProfile1","_app$appliedAt2","_app$appliedAt2$toDat","Card","ListItem","ListItemAvatar","Avatar","src","workerPhoto","width","height","Person","ListItemText","primary","Chip","icon","secondary","Work","fontSize","trade","LocationOn","location","readOnly","totalRatings","CheckCircle","Cancel","Message","name","photo","CalendarToday","Note","_app$workerProfile10","_app$workerProfile11","_app$workerProfile12","_app$appliedAt3","_app$appliedAt3$toDat","sm","flexDirection","CardContent","flex","Tooltip","overflow","textOverflow","WebkitLineClamp","WebkitBoxOrient","pt","flexWrap","IconButton","TableContainer","component","Table","TableHead","TableRow","TableCell","padding","indeterminate","TableBody","_app$workerProfile13","_app$workerProfile14","_app$workerProfile15","_app$appliedAt4","_app$appliedAt4$toDat","TablePagination","count","onPageChange","onRowsPerPageChange","parseInt","Dialog","open","onClose","DialogTitle","DialogContent","Alert","severity","DialogActions","writeBatch","appRef","update","commit","multiline","rows","ChatDialog","recipientId","recipientName","recipientPhoto","jobTitle","_app$workerProfile16","_app$workerProfile17","_app$workerProfile18","_app$workerProfile19","_app$workerProfile19$","_app$workerProfile20","Divider","available","_ref","messages","setMessages","newMessage","setNewMessage","sending","setSending","messagesEndRef","useRef","conversationId","q","orderBy","unsubscribe","onSnapshot","snapshot","messageList","markMessagesAsRead","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","unreadQuery","read","handleSendMessage","trim","addDoc","senderId","content","timestamp","serverTimestamp","participants","lastMessage","lastMessageTime","formatMessageTime","date","formatDistanceToNow","addSuffix","locale","es","PaperProps","borderBottom","borderColor","alt","Close","message","isOwnMessage","elevation","bgcolor","opacity","Schedule","ref","borderTop","onKeyPress","key","shiftKey","preventDefault","maxRows","endAdornment","Send"],"sourceRoot":""}