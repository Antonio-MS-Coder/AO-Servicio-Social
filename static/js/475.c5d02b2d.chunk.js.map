{"version":3,"file":"static/js/475.c5d02b2d.chunk.js","mappings":"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","sources":["components/applications/ApplicationManager.tsx","pages/JobDetails.tsx","components/chat/ChatDialog.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Avatar,\n  Chip,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Rating,\n  Divider,\n  Menu,\n  MenuItem,\n  Badge\n} from '@mui/material';\nimport {\n  Check,\n  Close,\n  Chat,\n  Star,\n  Schedule,\n  Work,\n  LocationOn,\n  AttachMoney,\n  MoreVert,\n  Person,\n  Email,\n  Phone,\n  Verified\n} from '@mui/icons-material';\nimport { \n  collection, \n  addDoc, \n  updateDoc, \n  doc, \n  getDocs, \n  query, \n  where,\n  serverTimestamp,\n  getDoc\n} from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { JobApplication, JobPosting } from '../../types';\nimport ChatDialog from '../chat/ChatDialog';\n\ninterface ApplicationManagerProps {\n  jobId?: string;\n  workerId?: string;\n  mode: 'job' | 'worker' | 'dashboard';\n}\n\nconst ApplicationManager: React.FC<ApplicationManagerProps> = ({ \n  jobId, \n  workerId,\n  mode \n}) => {\n  const { t } = useTranslation();\n  const { currentUser, userData } = useAuth();\n  const [applications, setApplications] = useState<JobApplication[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [applyDialogOpen, setApplyDialogOpen] = useState(false);\n  const [coverLetter, setCoverLetter] = useState('');\n  const [applying, setApplying] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedApplication, setSelectedApplication] = useState<JobApplication | null>(null);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [chatOpen, setChatOpen] = useState(false);\n  const [chatRecipient, setChatRecipient] = useState<{id: string, name: string, photo?: string} | null>(null);\n  const [jobDetails, setJobDetails] = useState<JobPosting | null>(null);\n\n  useEffect(() => {\n    fetchApplications();\n    if (jobId) {\n      fetchJobDetails();\n    }\n  }, [jobId, workerId, currentUser]);\n\n  const fetchJobDetails = async () => {\n    if (!jobId) return;\n    try {\n      const jobDoc = await getDoc(doc(db, 'jobs', jobId));\n      if (jobDoc.exists()) {\n        setJobDetails({ id: jobDoc.id, ...jobDoc.data() } as JobPosting);\n      }\n    } catch (error) {\n      console.error('Error fetching job details:', error);\n    }\n  };\n\n  const fetchApplications = async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    try {\n      let q;\n      if (mode === 'job' && jobId) {\n        // Get applications for a specific job\n        q = query(collection(db, 'applications'), where('jobId', '==', jobId));\n      } else if (mode === 'worker' && workerId) {\n        // Get applications by a specific worker\n        q = query(collection(db, 'applications'), where('workerId', '==', workerId));\n      } else if (mode === 'dashboard') {\n        // Get all applications for current user\n        if (userData?.role === 'worker') {\n          q = query(collection(db, 'applications'), where('workerId', '==', currentUser.uid));\n        } else {\n          // For employers, get applications for their jobs\n          const jobsQuery = query(collection(db, 'jobs'), where('employerId', '==', currentUser.uid));\n          const jobsSnapshot = await getDocs(jobsQuery);\n          const jobIds = jobsSnapshot.docs.map(doc => doc.id);\n          \n          if (jobIds.length > 0) {\n            q = query(collection(db, 'applications'), where('jobId', 'in', jobIds));\n          } else {\n            setApplications([]);\n            setLoading(false);\n            return;\n          }\n        }\n      } else {\n        setApplications([]);\n        setLoading(false);\n        return;\n      }\n\n      const snapshot = await getDocs(q);\n      const apps: JobApplication[] = [];\n      \n      for (const docSnapshot of snapshot.docs) {\n        const data = docSnapshot.data();\n        \n        // Fetch worker details\n        const workerDoc = await getDoc(doc(db, 'workers', data.workerId));\n        const workerData = workerDoc.exists() ? workerDoc.data() : {};\n        \n        apps.push({\n          id: docSnapshot.id,\n          ...data,\n          workerName: workerData.name || data.workerName || 'Usuario',\n          workerPhoto: workerData.photoUrl,\n          workerRating: workerData.rating || 0,\n          workerExperience: workerData.experience || 0,\n          workerTrade: workerData.trade\n        } as JobApplication);\n      }\n      \n      setApplications(apps);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      setError('Error al cargar las aplicaciones');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApply = async () => {\n    if (!currentUser || !jobId) return;\n    \n    setApplying(true);\n    setError('');\n    \n    try {\n      // Check if already applied\n      const existingQuery = query(\n        collection(db, 'applications'),\n        where('jobId', '==', jobId),\n        where('workerId', '==', currentUser.uid)\n      );\n      const existingSnapshot = await getDocs(existingQuery);\n      \n      if (!existingSnapshot.empty) {\n        setError('Ya has aplicado a este trabajo');\n        return;\n      }\n\n      // Create application\n      await addDoc(collection(db, 'applications'), {\n        jobId,\n        workerId: currentUser.uid,\n        workerName: userData?.displayName || userData?.email || 'Trabajador',\n        coverLetter: coverLetter.trim(),\n        status: 'pending',\n        appliedAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n\n      // Update job's applicants count\n      const jobRef = doc(db, 'jobs', jobId);\n      const jobDoc = await getDoc(jobRef);\n      if (jobDoc.exists()) {\n        const currentApplicants = jobDoc.data().applicants || [];\n        await updateDoc(jobRef, {\n          applicants: [...currentApplicants, currentUser.uid]\n        });\n      }\n\n      setApplyDialogOpen(false);\n      setCoverLetter('');\n      fetchApplications();\n    } catch (error) {\n      console.error('Error applying to job:', error);\n      setError('Error al enviar la aplicación');\n    } finally {\n      setApplying(false);\n    }\n  };\n\n  const handleUpdateStatus = async (applicationId: string, newStatus: 'accepted' | 'rejected') => {\n    try {\n      await updateDoc(doc(db, 'applications', applicationId), {\n        status: newStatus,\n        updatedAt: serverTimestamp()\n      });\n      \n      fetchApplications();\n      setAnchorEl(null);\n    } catch (error) {\n      console.error('Error updating application status:', error);\n      setError('Error al actualizar el estado');\n    }\n  };\n\n  const handleOpenChat = (application: JobApplication) => {\n    setChatRecipient({\n      id: application.workerId,\n      name: application.workerName,\n      photo: application.workerPhoto\n    });\n    setChatOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'accepted': return 'success';\n      case 'rejected': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending': return <Schedule />;\n      case 'accepted': return <Check />;\n      case 'rejected': return <Close />;\n      default: return <Schedule />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" p={4}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const canApply = userData?.role === 'worker' && jobId && mode === 'job';\n  const canManage = userData?.role === 'employer';\n\n  return (\n    <Box>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {canApply && (\n        <Box mb={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            startIcon={<Work />}\n            onClick={() => setApplyDialogOpen(true)}\n            fullWidth\n          >\n            Aplicar a este trabajo\n          </Button>\n        </Box>\n      )}\n\n      {applications.length === 0 ? (\n        <Card>\n          <CardContent>\n            <Typography variant=\"body1\" color=\"text.secondary\" textAlign=\"center\">\n              {mode === 'job' ? 'No hay aplicaciones para este trabajo aún' :\n               mode === 'worker' ? 'No has aplicado a ningún trabajo' :\n               'No hay aplicaciones'}\n            </Typography>\n          </CardContent>\n        </Card>\n      ) : (\n        <List>\n          {applications.map((application) => (\n            <Card key={application.id} sx={{ mb: 2 }}>\n              <ListItem>\n                <ListItemAvatar>\n                  <Badge\n                    overlap=\"circular\"\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                    badgeContent={\n                      application.workerRating && application.workerRating > 0 ? (\n                        <Box display=\"flex\" alignItems=\"center\" sx={{ bgcolor: 'background.paper', borderRadius: 1, px: 0.5 }}>\n                          <Star sx={{ fontSize: 14, color: 'warning.main' }} />\n                          <Typography variant=\"caption\">{application.workerRating}</Typography>\n                        </Box>\n                      ) : undefined\n                    }\n                  >\n                    <Avatar src={application.workerPhoto} alt={application.workerName}>\n                      <Person />\n                    </Avatar>\n                  </Badge>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                        {application.workerName}\n                      </Typography>\n                      <Chip\n                        size=\"small\"\n                        label={t(`application.status.${application.status}`)}\n                        color={getStatusColor(application.status)}\n                        icon={getStatusIcon(application.status)}\n                      />\n                      {application.workerExperience && application.workerExperience > 0 && (\n                        <Chip\n                          size=\"small\"\n                          label={`${application.workerExperience} años exp.`}\n                          variant=\"outlined\"\n                        />\n                      )}\n                    </Box>\n                  }\n                  secondary={\n                    <Box>\n                      {application.coverLetter && (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                          \"{application.coverLetter}\"\n                        </Typography>\n                      )}\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Aplicó: {new Date(application.appliedAt).toLocaleDateString('es-MX')}\n                      </Typography>\n                    </Box>\n                  }\n                />\n                <ListItemSecondaryAction>\n                  <Box display=\"flex\" gap={1}>\n                    <IconButton \n                      color=\"primary\"\n                      onClick={() => handleOpenChat(application)}\n                    >\n                      <Chat />\n                    </IconButton>\n                    {canManage && application.status === 'pending' && (\n                      <IconButton\n                        onClick={(e) => {\n                          setAnchorEl(e.currentTarget);\n                          setSelectedApplication(application);\n                        }}\n                      >\n                        <MoreVert />\n                      </IconButton>\n                    )}\n                  </Box>\n                </ListItemSecondaryAction>\n              </ListItem>\n            </Card>\n          ))}\n        </List>\n      )}\n\n      {/* Apply Dialog */}\n      <Dialog open={applyDialogOpen} onClose={() => setApplyDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Aplicar al trabajo</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 2 }}>\n            {jobDetails && (\n              <Card sx={{ mb: 3, bgcolor: 'grey.50' }}>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>{jobDetails.title}</Typography>\n                  <Box display=\"flex\" gap={2} flexWrap=\"wrap\">\n                    <Chip icon={<AttachMoney />} label={`$${jobDetails.salary.amount}/${jobDetails.salary.period}`} />\n                    <Chip icon={<LocationOn />} label={jobDetails.location} />\n                    {jobDetails.duration && <Chip icon={<Schedule />} label={jobDetails.duration} />}\n                  </Box>\n                </CardContent>\n              </Card>\n            )}\n            <TextField\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Carta de presentación (opcional)\"\n              placeholder=\"Cuéntale al empleador por qué eres el candidato ideal...\"\n              value={coverLetter}\n              onChange={(e) => setCoverLetter(e.target.value)}\n              variant=\"outlined\"\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setApplyDialogOpen(false)}>Cancelar</Button>\n          <Button \n            onClick={handleApply} \n            variant=\"contained\" \n            disabled={applying}\n            startIcon={applying ? <CircularProgress size={20} /> : <Work />}\n          >\n            {applying ? 'Enviando...' : 'Enviar aplicación'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Status Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={() => setAnchorEl(null)}\n      >\n        <MenuItem \n          onClick={() => selectedApplication && handleUpdateStatus(selectedApplication.id, 'accepted')}\n        >\n          <Check sx={{ mr: 1 }} /> Aceptar\n        </MenuItem>\n        <MenuItem \n          onClick={() => selectedApplication && handleUpdateStatus(selectedApplication.id, 'rejected')}\n        >\n          <Close sx={{ mr: 1 }} /> Rechazar\n        </MenuItem>\n      </Menu>\n\n      {/* Chat Dialog */}\n      {chatRecipient && (\n        <ChatDialog\n          open={chatOpen}\n          onClose={() => setChatOpen(false)}\n          recipientId={chatRecipient.id}\n          recipientName={chatRecipient.name}\n          recipientPhoto={chatRecipient.photo}\n          jobId={jobId}\n          jobTitle={jobDetails?.title}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default ApplicationManager;","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Box,\n  Button,\n  Chip,\n  Avatar,\n  Divider,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Breadcrumbs,\n  Link\n} from '@mui/material';\nimport { Grid } from '@mui/material';\nimport {\n  LocationOn,\n  AttachMoney,\n  Schedule,\n  Work,\n  Person,\n  Business,\n  Star,\n  ArrowBack,\n  Share,\n  Bookmark,\n  BookmarkBorder,\n  CheckCircle,\n  Warning,\n  CalendarToday,\n  Group,\n  Verified\n} from '@mui/icons-material';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { useAuth } from '../contexts/AuthContext';\nimport { JobPosting, Trade } from '../types';\nimport ApplicationManager from '../components/applications/ApplicationManager';\nimport ChatDialog from '../components/chat/ChatDialog';\n\nconst JobDetails: React.FC = () => {\n  const { id } = useParams();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { currentUser, userData } = useAuth();\n  \n  const [job, setJob] = useState<JobPosting | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [saved, setSaved] = useState(false);\n  const [chatOpen, setChatOpen] = useState(false);\n  const [employerData, setEmployerData] = useState<any>(null);\n\n  useEffect(() => {\n    if (id) {\n      fetchJobDetails();\n      checkIfSaved();\n    }\n  }, [id]);\n\n  const fetchJobDetails = async () => {\n    if (!id) return;\n    \n    setLoading(true);\n    try {\n      const jobDoc = await getDoc(doc(db, 'jobs', id));\n      \n      if (jobDoc.exists()) {\n        const jobData = { id: jobDoc.id, ...jobDoc.data() } as JobPosting;\n        setJob(jobData);\n        \n        // Fetch employer data\n        if (jobData.employerId) {\n          const employerDoc = await getDoc(doc(db, 'employers', jobData.employerId));\n          if (employerDoc.exists()) {\n            setEmployerData(employerDoc.data());\n          }\n        }\n      } else {\n        setError('Trabajo no encontrado');\n      }\n    } catch (error) {\n      console.error('Error fetching job details:', error);\n      setError('Error al cargar los detalles del trabajo');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkIfSaved = () => {\n    const savedJobs = localStorage.getItem('savedJobs');\n    if (savedJobs && id) {\n      const saved = JSON.parse(savedJobs);\n      setSaved(saved.includes(id));\n    }\n  };\n\n  const handleSaveJob = () => {\n    if (!id) return;\n    \n    const savedJobs = localStorage.getItem('savedJobs');\n    let saved = savedJobs ? JSON.parse(savedJobs) : [];\n    \n    if (saved.includes(id)) {\n      saved = saved.filter((jobId: string) => jobId !== id);\n      setSaved(false);\n    } else {\n      saved.push(id);\n      setSaved(true);\n    }\n    \n    localStorage.setItem('savedJobs', JSON.stringify(saved));\n  };\n\n  const handleShare = () => {\n    if (navigator.share && job) {\n      navigator.share({\n        title: job.title,\n        text: `${job.title} - ${job.location}`,\n        url: window.location.href,\n      });\n    } else {\n      // Fallback - copy to clipboard\n      navigator.clipboard.writeText(window.location.href);\n      // You could show a toast here\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error || !job) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n        <Alert severity=\"error\">\n          {error || 'Trabajo no encontrado'}\n        </Alert>\n        <Button\n          startIcon={<ArrowBack />}\n          onClick={() => navigate('/jobs')}\n          sx={{ mt: 2 }}\n        >\n          Volver a trabajos\n        </Button>\n      </Container>\n    );\n  }\n\n  const isEmployer = userData?.role === 'employer';\n  const isOwner = job.employerId === currentUser?.uid;\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      {/* Breadcrumbs */}\n      <Breadcrumbs sx={{ mb: 3 }}>\n        <Link\n          underline=\"hover\"\n          color=\"inherit\"\n          href=\"#\"\n          onClick={(e) => {\n            e.preventDefault();\n            navigate('/');\n          }}\n        >\n          Inicio\n        </Link>\n        <Link\n          underline=\"hover\"\n          color=\"inherit\"\n          href=\"#\"\n          onClick={(e) => {\n            e.preventDefault();\n            navigate('/jobs');\n          }}\n        >\n          Trabajos\n        </Link>\n        <Typography color=\"text.primary\">{job.title}</Typography>\n      </Breadcrumbs>\n\n      <Grid container spacing={3}>\n        {/* Main Content */}\n        <Grid item xs={12} md={8}>\n          {/* Job Header */}\n          <Paper sx={{ p: 4, mb: 3 }}>\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"start\" mb={3}>\n              <Box flex={1}>\n                <Typography variant=\"h4\" gutterBottom fontWeight=\"bold\">\n                  {job.title}\n                </Typography>\n                \n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                  <Chip\n                    icon={<Business />}\n                    label={job.employerName || 'Empresa'}\n                    variant=\"outlined\"\n                  />\n                  {employerData?.rating > 0 && (\n                    <Chip\n                      icon={<Star />}\n                      label={`${employerData.rating.toFixed(1)} (${employerData.totalRatings})`}\n                      color=\"warning\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                  {employerData?.verified && (\n                    <Chip\n                      icon={<Verified />}\n                      label=\"Verificado\"\n                      color=\"success\"\n                      size=\"small\"\n                    />\n                  )}\n                </Box>\n\n                <Box display=\"flex\" gap={2} flexWrap=\"wrap\">\n                  <Chip\n                    icon={<LocationOn />}\n                    label={job.location}\n                    color=\"primary\"\n                  />\n                  <Chip\n                    icon={<AttachMoney />}\n                    label={`$${job.salary.amount} / ${t(`salary.${job.salary.period}`)}`}\n                    color=\"success\"\n                  />\n                  {job.duration && (\n                    <Chip\n                      icon={<Schedule />}\n                      label={job.duration}\n                    />\n                  )}\n                  <Chip\n                    icon={<Work />}\n                    label={t(`trades.${job.trade}`)}\n                  />\n                </Box>\n              </Box>\n\n              <Box display=\"flex\" gap={1}>\n                <IconButton onClick={handleSaveJob} color=\"primary\">\n                  {saved ? <Bookmark /> : <BookmarkBorder />}\n                </IconButton>\n                <IconButton onClick={handleShare}>\n                  <Share />\n                </IconButton>\n              </Box>\n            </Box>\n\n            <Divider sx={{ my: 3 }} />\n\n            {/* Job Description */}\n            <Box mb={3}>\n              <Typography variant=\"h6\" gutterBottom fontWeight=\"bold\">\n                Descripción del trabajo\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                {job.description}\n              </Typography>\n            </Box>\n\n            {/* Requirements */}\n            {job.requirements && job.requirements.length > 0 && (\n              <Box mb={3}>\n                <Typography variant=\"h6\" gutterBottom fontWeight=\"bold\">\n                  Requisitos\n                </Typography>\n                <List dense>\n                  {job.requirements.map((req, index) => (\n                    <ListItem key={index}>\n                      <ListItemIcon>\n                        <CheckCircle color=\"primary\" fontSize=\"small\" />\n                      </ListItemIcon>\n                      <ListItemText primary={req} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            )}\n\n            {/* Job Status */}\n            <Box display=\"flex\" alignItems=\"center\" gap={2}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Estado:\n              </Typography>\n              <Chip\n                label={job.status === 'open' ? 'Abierto' : 'Cerrado'}\n                color={job.status === 'open' ? 'success' : 'default'}\n                size=\"small\"\n              />\n              {job.applicants && (\n                <Chip\n                  icon={<Group />}\n                  label={`${job.applicants.length} aplicantes`}\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              )}\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Publicado: {new Date(job.createdAt).toLocaleDateString('es-MX')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Applications Section */}\n          {(isOwner || !isEmployer) && (\n            <Paper sx={{ p: 4 }}>\n              <Typography variant=\"h6\" gutterBottom fontWeight=\"bold\">\n                {isOwner ? 'Aplicaciones recibidas' : 'Tu aplicación'}\n              </Typography>\n              <ApplicationManager\n                jobId={id}\n                mode=\"job\"\n              />\n            </Paper>\n          )}\n        </Grid>\n\n        {/* Sidebar */}\n        <Grid item xs={12} md={4}>\n          {/* Action Card */}\n          {!isEmployer && (\n            <Card sx={{ mb: 3, position: 'sticky', top: 20 }}>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  ¿Interesado en este trabajo?\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Aplica ahora y conecta directamente con el empleador\n                </Typography>\n                <ApplicationManager\n                  jobId={id}\n                  mode=\"job\"\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Employer Card */}\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Sobre el empleador\n              </Typography>\n              \n              <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                <Avatar src={employerData?.logoUrl} sx={{ width: 56, height: 56 }}>\n                  <Business />\n                </Avatar>\n                <Box>\n                  <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                    {job.employerName}\n                  </Typography>\n                  {employerData?.businessType && (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {employerData.businessType}\n                    </Typography>\n                  )}\n                </Box>\n              </Box>\n\n              {employerData?.description && (\n                <Typography variant=\"body2\" paragraph>\n                  {employerData.description}\n                </Typography>\n              )}\n\n              {!isOwner && currentUser && (\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  startIcon={<Person />}\n                  onClick={() => setChatOpen(true)}\n                >\n                  Contactar empleador\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Safety Tips */}\n          <Card sx={{ mt: 3 }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={2}>\n                <Warning color=\"warning\" />\n                <Typography variant=\"h6\">Consejos de seguridad</Typography>\n              </Box>\n              <List dense>\n                <ListItem>\n                  <ListItemText\n                    primary=\"Verifica la identidad del empleador\"\n                    primaryTypographyProps={{ variant: 'body2' }}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary=\"Nunca pagues por adelantado\"\n                    primaryTypographyProps={{ variant: 'body2' }}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary=\"Reúnete en lugares públicos\"\n                    primaryTypographyProps={{ variant: 'body2' }}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary=\"Reporta actividades sospechosas\"\n                    primaryTypographyProps={{ variant: 'body2' }}\n                  />\n                </ListItem>\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Chat Dialog */}\n      {job && (\n        <ChatDialog\n          open={chatOpen}\n          onClose={() => setChatOpen(false)}\n          recipientId={job.employerId}\n          recipientName={job.employerName}\n          recipientPhoto={employerData?.logoUrl}\n          jobId={id}\n          jobTitle={job.title}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default JobDetails;","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Avatar,\n  Paper,\n  IconButton,\n  Divider,\n  CircularProgress,\n  Chip\n} from '@mui/material';\nimport {\n  Send,\n  Close,\n  AttachFile,\n  CheckCircle,\n  Schedule\n} from '@mui/icons-material';\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  addDoc, \n  serverTimestamp,\n  doc,\n  updateDoc,\n  getDocs,\n  limit\n} from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { formatDistanceToNow } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface ChatDialogProps {\n  open: boolean;\n  onClose: () => void;\n  recipientId: string;\n  recipientName: string;\n  recipientPhoto?: string;\n  jobId?: string;\n  jobTitle?: string;\n}\n\ninterface Message {\n  id: string;\n  senderId: string;\n  recipientId: string;\n  content: string;\n  timestamp: any;\n  read: boolean;\n  jobId?: string;\n}\n\nconst ChatDialog: React.FC<ChatDialogProps> = ({\n  open,\n  onClose,\n  recipientId,\n  recipientName,\n  recipientPhoto,\n  jobId,\n  jobTitle\n}) => {\n  const { currentUser } = useAuth();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!open || !currentUser) return;\n\n    setLoading(true);\n    \n    // Create conversation ID (sorted user IDs to ensure consistency)\n    const conversationId = [currentUser.uid, recipientId].sort().join('_');\n    \n    // Subscribe to messages\n    const q = query(\n      collection(db, 'messages'),\n      where('conversationId', '==', conversationId),\n      orderBy('timestamp', 'asc')\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const messageList: Message[] = [];\n      snapshot.forEach((doc) => {\n        messageList.push({ id: doc.id, ...doc.data() } as Message);\n      });\n      setMessages(messageList);\n      setLoading(false);\n      \n      // Mark messages as read\n      markMessagesAsRead();\n    });\n\n    return () => unsubscribe();\n  }, [open, currentUser, recipientId]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const markMessagesAsRead = async () => {\n    if (!currentUser) return;\n    \n    const unreadQuery = query(\n      collection(db, 'messages'),\n      where('recipientId', '==', currentUser.uid),\n      where('senderId', '==', recipientId),\n      where('read', '==', false)\n    );\n\n    const snapshot = await getDocs(unreadQuery);\n    snapshot.forEach(async (document) => {\n      await updateDoc(doc(db, 'messages', document.id), { read: true });\n    });\n  };\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !currentUser || sending) return;\n\n    setSending(true);\n    try {\n      const conversationId = [currentUser.uid, recipientId].sort().join('_');\n      \n      await addDoc(collection(db, 'messages'), {\n        conversationId,\n        senderId: currentUser.uid,\n        recipientId,\n        content: newMessage.trim(),\n        timestamp: serverTimestamp(),\n        read: false,\n        jobId: jobId || null\n      });\n\n      // Also create/update conversation document for easy listing\n      await addDoc(collection(db, 'conversations'), {\n        participants: [currentUser.uid, recipientId],\n        lastMessage: newMessage.trim(),\n        lastMessageTime: serverTimestamp(),\n        jobId: jobId || null,\n        jobTitle: jobTitle || null\n      });\n\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const formatMessageTime = (timestamp: any) => {\n    if (!timestamp) return '';\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n    return formatDistanceToNow(date, { addSuffix: true, locale: es });\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '70vh', display: 'flex', flexDirection: 'column' }\n      }}\n    >\n      <DialogTitle sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\n            <Avatar src={recipientPhoto} alt={recipientName}>\n              {recipientName[0]}\n            </Avatar>\n            <Box>\n              <Typography variant=\"h6\">{recipientName}</Typography>\n              {jobTitle && (\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {jobTitle}\n                </Typography>\n              )}\n            </Box>\n          </Box>\n          <IconButton onClick={onClose}>\n            <Close />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" p={4}>\n            <CircularProgress />\n          </Box>\n        ) : messages.length === 0 ? (\n          <Box textAlign=\"center\" p={4}>\n            <Typography color=\"text.secondary\">\n              Inicia la conversación con un mensaje\n            </Typography>\n          </Box>\n        ) : (\n          <Box>\n            {messages.map((message) => {\n              const isOwnMessage = message.senderId === currentUser?.uid;\n              return (\n                <Box\n                  key={message.id}\n                  display=\"flex\"\n                  justifyContent={isOwnMessage ? 'flex-end' : 'flex-start'}\n                  mb={2}\n                >\n                  <Paper\n                    elevation={1}\n                    sx={{\n                      p: 1.5,\n                      maxWidth: '70%',\n                      bgcolor: isOwnMessage ? 'primary.main' : 'grey.100',\n                      color: isOwnMessage ? 'white' : 'text.primary'\n                    }}\n                  >\n                    <Typography variant=\"body2\">{message.content}</Typography>\n                    <Box display=\"flex\" alignItems=\"center\" gap={0.5} mt={0.5}>\n                      <Typography \n                        variant=\"caption\" \n                        sx={{ \n                          opacity: 0.7,\n                          color: isOwnMessage ? 'white' : 'text.secondary'\n                        }}\n                      >\n                        {formatMessageTime(message.timestamp)}\n                      </Typography>\n                      {isOwnMessage && (\n                        message.read ? (\n                          <CheckCircle sx={{ fontSize: 14 }} />\n                        ) : (\n                          <Schedule sx={{ fontSize: 14 }} />\n                        )\n                      )}\n                    </Box>\n                  </Paper>\n                </Box>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          placeholder=\"Escribe un mensaje...\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleSendMessage();\n            }\n          }}\n          multiline\n          maxRows={3}\n          disabled={sending}\n          InputProps={{\n            endAdornment: (\n              <IconButton \n                onClick={handleSendMessage} \n                disabled={!newMessage.trim() || sending}\n                color=\"primary\"\n              >\n                <Send />\n              </IconButton>\n            )\n          }}\n        />\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ChatDialog;"],"names":["_ref","jobId","workerId","mode","t","useTranslation","currentUser","userData","useAuth","applications","setApplications","useState","loading","setLoading","applyDialogOpen","setApplyDialogOpen","coverLetter","setCoverLetter","applying","setApplying","error","setError","selectedApplication","setSelectedApplication","anchorEl","setAnchorEl","chatOpen","setChatOpen","chatRecipient","setChatRecipient","jobDetails","setJobDetails","useEffect","fetchApplications","fetchJobDetails","async","jobDoc","getDoc","doc","db","exists","_objectSpread","id","data","console","q","query","collection","where","role","uid","jobsQuery","jobIds","getDocs","docs","map","length","snapshot","apps","docSnapshot","workerDoc","workerData","push","workerName","name","workerPhoto","photoUrl","workerRating","rating","workerExperience","experience","workerTrade","trade","handleUpdateStatus","applicationId","newStatus","updateDoc","status","updatedAt","serverTimestamp","getStatusColor","getStatusIcon","_jsx","Schedule","Check","Close","Box","display","justifyContent","p","children","CircularProgress","canApply","canManage","_jsxs","Alert","severity","sx","mb","onClose","Button","variant","color","size","startIcon","Work","onClick","fullWidth","Card","CardContent","Typography","textAlign","List","application","ListItem","ListItemAvatar","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","alignItems","bgcolor","borderRadius","px","Star","fontSize","undefined","Avatar","src","alt","Person","ListItemText","primary","gap","fontWeight","Chip","label","concat","icon","secondary","mt","Date","appliedAt","toLocaleDateString","ListItemSecondaryAction","IconButton","photo","handleOpenChat","Chat","e","currentTarget","MoreVert","Dialog","open","maxWidth","DialogTitle","DialogContent","pt","gutterBottom","title","flexWrap","AttachMoney","salary","amount","period","LocationOn","location","duration","TextField","multiline","rows","placeholder","value","onChange","target","DialogActions","existingQuery","empty","addDoc","displayName","email","trim","jobRef","currentApplicants","applicants","disabled","Menu","Boolean","MenuItem","mr","ChatDialog","recipientId","recipientName","recipientPhoto","jobTitle","JobDetails","useParams","navigate","useNavigate","job","setJob","saved","setSaved","employerData","setEmployerData","checkIfSaved","jobData","employerId","employerDoc","savedJobs","localStorage","getItem","JSON","parse","includes","Container","py","ArrowBack","isEmployer","isOwner","Breadcrumbs","Link","underline","href","preventDefault","Grid","container","spacing","item","xs","md","Paper","flex","Business","employerName","toFixed","totalRatings","verified","Verified","handleSaveJob","filter","setItem","stringify","Bookmark","BookmarkBorder","handleShare","navigator","share","text","url","window","clipboard","writeText","Share","Divider","my","paragraph","description","requirements","dense","req","index","ListItemIcon","CheckCircle","Group","createdAt","ApplicationManager","position","top","logoUrl","width","height","businessType","Warning","primaryTypographyProps","messages","setMessages","newMessage","setNewMessage","sending","setSending","messagesEndRef","useRef","conversationId","sort","join","orderBy","unsubscribe","onSnapshot","messageList","forEach","markMessagesAsRead","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","unreadQuery","document","read","handleSendMessage","senderId","content","timestamp","participants","lastMessage","lastMessageTime","formatMessageTime","date","toDate","formatDistanceToNow","addSuffix","locale","es","PaperProps","flexDirection","borderBottom","borderColor","overflow","message","isOwnMessage","elevation","opacity","ref","borderTop","onKeyPress","key","shiftKey","maxRows","InputProps","endAdornment","Send"],"sourceRoot":""}