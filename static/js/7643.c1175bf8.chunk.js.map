{"version":3,"file":"static/js/7643.c1175bf8.chunk.js","mappings":"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","sources":["pages/admin/UserManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Avatar,\n  Grid,\n  Card,\n  CardContent,\n  Tooltip,\n  Switch,\n  FormControlLabel,\n  Alert,\n  Snackbar\n} from '@mui/material';\nimport {\n  Search,\n  Block,\n  CheckCircle,\n  Edit,\n  Delete,\n  Email,\n  Phone,\n  LocationOn,\n  Work,\n  School,\n  Verified,\n  Warning,\n  FilterList,\n  Download,\n  PersonAdd,\n  AdminPanelSettings\n} from '@mui/icons-material';\nimport { collection, getDocs, doc, updateDoc, deleteDoc, query, where, orderBy, limit, Timestamp } from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface UserData {\n  id: string;\n  email: string;\n  displayName?: string;\n  phone?: string;\n  role: 'worker' | 'employer' | 'admin';\n  status: 'active' | 'blocked' | 'pending';\n  createdAt: any;\n  lastLogin?: any;\n  profileComplete?: number;\n  verified?: boolean;\n  // Worker specific\n  trade?: string;\n  experience?: number;\n  rating?: number;\n  certifications?: number;\n  jobsCompleted?: number;\n  // Employer specific\n  companyName?: string;\n  businessType?: string;\n  jobsPosted?: number;\n}\n\nconst UserManagement: React.FC = () => {\n  const [users, setUsers] = useState<UserData[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<UserData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedUser, setSelectedUser] = useState<UserData | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [actionType, setActionType] = useState<'block' | 'unblock' | 'delete' | 'verify'>('block');\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    filterUsers();\n  }, [users, searchTerm, roleFilter, statusFilter]);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const usersSnapshot = await getDocs(collection(db, 'users'));\n      const usersData: UserData[] = [];\n\n      for (const doc of usersSnapshot.docs) {\n        const userData = doc.data();\n        let additionalData = {};\n\n        // Fetch additional profile data based on role\n        if (userData.role === 'worker') {\n          const workerQuery = query(collection(db, 'workerProfiles'), where('userId', '==', doc.id));\n          const workerSnapshot = await getDocs(workerQuery);\n          if (!workerSnapshot.empty) {\n            const workerData = workerSnapshot.docs[0].data();\n            additionalData = {\n              trade: workerData.trade,\n              experience: workerData.experience,\n              rating: workerData.rating || 0,\n              certifications: workerData.certifications?.length || 0\n            };\n          }\n        } else if (userData.role === 'employer') {\n          const employerQuery = query(collection(db, 'employerProfiles'), where('userId', '==', doc.id));\n          const employerSnapshot = await getDocs(employerQuery);\n          if (!employerSnapshot.empty) {\n            const employerData = employerSnapshot.docs[0].data();\n            additionalData = {\n              companyName: employerData.companyName,\n              businessType: employerData.businessType,\n              verified: employerData.verified || false\n            };\n          }\n        }\n\n        usersData.push({\n          id: doc.id,\n          email: userData.email,\n          displayName: userData.displayName,\n          phone: userData.phone,\n          role: userData.role,\n          status: userData.status || 'active',\n          createdAt: userData.createdAt,\n          lastLogin: userData.lastLogin,\n          profileComplete: userData.profileComplete,\n          ...additionalData\n        });\n      }\n\n      setUsers(usersData);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setSnackbar({ open: true, message: 'Error al cargar usuarios', severity: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterUsers = () => {\n    let filtered = [...users];\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(user =>\n        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (user as any).companyName?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Role filter\n    if (roleFilter !== 'all') {\n      filtered = filtered.filter(user => user.role === roleFilter);\n    }\n\n    // Status filter\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(user => user.status === statusFilter);\n    }\n\n    setFilteredUsers(filtered);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleUserAction = async () => {\n    if (!selectedUser) return;\n\n    try {\n      const userRef = doc(db, 'users', selectedUser.id);\n\n      switch (actionType) {\n        case 'block':\n          await updateDoc(userRef, { status: 'blocked' });\n          setSnackbar({ open: true, message: 'Usuario bloqueado exitosamente', severity: 'success' });\n          break;\n        case 'unblock':\n          await updateDoc(userRef, { status: 'active' });\n          setSnackbar({ open: true, message: 'Usuario desbloqueado exitosamente', severity: 'success' });\n          break;\n        case 'verify':\n          if (selectedUser.role === 'employer') {\n            const employerQuery = query(collection(db, 'employerProfiles'), where('userId', '==', selectedUser.id));\n            const employerSnapshot = await getDocs(employerQuery);\n            if (!employerSnapshot.empty) {\n              await updateDoc(doc(db, 'employerProfiles', employerSnapshot.docs[0].id), { verified: true });\n            }\n          }\n          await updateDoc(userRef, { verified: true });\n          setSnackbar({ open: true, message: 'Cuenta verificada exitosamente', severity: 'success' });\n          break;\n        case 'delete':\n          // Delete user and related data\n          await deleteDoc(userRef);\n          // Also delete profile data\n          if (selectedUser.role === 'worker') {\n            const workerQuery = query(collection(db, 'workerProfiles'), where('userId', '==', selectedUser.id));\n            const workerSnapshot = await getDocs(workerQuery);\n            for (const doc of workerSnapshot.docs) {\n              await deleteDoc(doc.ref);\n            }\n          } else if (selectedUser.role === 'employer') {\n            const employerQuery = query(collection(db, 'employerProfiles'), where('userId', '==', selectedUser.id));\n            const employerSnapshot = await getDocs(employerQuery);\n            for (const doc of employerSnapshot.docs) {\n              await deleteDoc(doc.ref);\n            }\n          }\n          setSnackbar({ open: true, message: 'Usuario eliminado exitosamente', severity: 'success' });\n          break;\n      }\n\n      setActionDialog(false);\n      setSelectedUser(null);\n      fetchUsers(); // Refresh data\n    } catch (error) {\n      console.error('Error performing action:', error);\n      setSnackbar({ open: true, message: 'Error al realizar la acción', severity: 'error' });\n    }\n  };\n\n  const openActionDialog = (user: UserData, action: 'block' | 'unblock' | 'delete' | 'verify') => {\n    setSelectedUser(user);\n    setActionType(action);\n    setActionDialog(true);\n  };\n\n  const openUserDetails = (user: UserData) => {\n    setSelectedUser(user);\n    setDialogOpen(true);\n  };\n\n  const exportUsers = () => {\n    const csvContent = [\n      ['ID', 'Email', 'Nombre', 'Rol', 'Estado', 'Fecha Registro', 'Empresa', 'Oficio'],\n      ...filteredUsers.map(user => [\n        user.id,\n        user.email,\n        user.displayName || '',\n        user.role,\n        user.status,\n        user.createdAt ? format(user.createdAt.toDate(), 'dd/MM/yyyy') : '',\n        (user as any).companyName || '',\n        user.trade || ''\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `usuarios_${format(new Date(), 'yyyyMMdd')}.csv`;\n    a.click();\n  };\n\n  const getRoleChip = (role: string) => {\n    const roleConfig = {\n      worker: { label: 'Trabajador', color: 'primary' as const },\n      employer: { label: 'Empleador', color: 'secondary' as const },\n      admin: { label: 'Admin', color: 'error' as const }\n    };\n    const config = roleConfig[role as keyof typeof roleConfig] || { label: role, color: 'default' as const };\n    return <Chip label={config.label} color={config.color} size=\"small\" />;\n  };\n\n  const getStatusChip = (status: string) => {\n    const statusConfig = {\n      active: { label: 'Activo', color: 'success' as const, icon: <CheckCircle /> },\n      blocked: { label: 'Bloqueado', color: 'error' as const, icon: <Block /> },\n      pending: { label: 'Pendiente', color: 'warning' as const, icon: <Warning /> }\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || { label: status, color: 'default' as const };\n    return <Chip label={config.label} color={config.color} size=\"small\" icon={config.icon} />;\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <AdminPanelSettings sx={{ fontSize: 40, color: '#007A33' }} />\n          Gestión de Usuarios\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Administra usuarios, verifica empresas y gestiona permisos\n        </Typography>\n      </Box>\n\n      {/* Statistics Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>\n            <CardContent>\n              <Typography color=\"white\" variant=\"h6\">Total Usuarios</Typography>\n              <Typography color=\"white\" variant=\"h3\">{users.length}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' }}>\n            <CardContent>\n              <Typography color=\"white\" variant=\"h6\">Trabajadores</Typography>\n              <Typography color=\"white\" variant=\"h3\">\n                {users.filter(u => u.role === 'worker').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)' }}>\n            <CardContent>\n              <Typography color=\"white\" variant=\"h6\">Empleadores</Typography>\n              <Typography color=\"white\" variant=\"h3\">\n                {users.filter(u => u.role === 'employer').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)' }}>\n            <CardContent>\n              <Typography color=\"white\" variant=\"h6\">Activos</Typography>\n              <Typography color=\"white\" variant=\"h3\">\n                {users.filter(u => u.status === 'active').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Filters and Search */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs={12} md={4}>\n            <TextField\n              fullWidth\n              placeholder=\"Buscar por email, nombre o empresa...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Search />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <FormControl fullWidth>\n              <InputLabel>Rol</InputLabel>\n              <Select\n                value={roleFilter}\n                onChange={(e) => setRoleFilter(e.target.value)}\n                label=\"Rol\"\n              >\n                <MenuItem value=\"all\">Todos</MenuItem>\n                <MenuItem value=\"worker\">Trabajadores</MenuItem>\n                <MenuItem value=\"employer\">Empleadores</MenuItem>\n                <MenuItem value=\"admin\">Administradores</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <FormControl fullWidth>\n              <InputLabel>Estado</InputLabel>\n              <Select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                label=\"Estado\"\n              >\n                <MenuItem value=\"all\">Todos</MenuItem>\n                <MenuItem value=\"active\">Activos</MenuItem>\n                <MenuItem value=\"blocked\">Bloqueados</MenuItem>\n                <MenuItem value=\"pending\">Pendientes</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<FilterList />}\n              onClick={() => {\n                setSearchTerm('');\n                setRoleFilter('all');\n                setStatusFilter('all');\n              }}\n            >\n              Limpiar Filtros\n            </Button>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              startIcon={<Download />}\n              onClick={exportUsers}\n              sx={{ bgcolor: '#007A33' }}\n            >\n              Exportar CSV\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Users Table */}\n      <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n        <TableContainer sx={{ maxHeight: 600 }}>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                <TableCell>Usuario</TableCell>\n                <TableCell>Rol</TableCell>\n                <TableCell>Estado</TableCell>\n                <TableCell>Detalles</TableCell>\n                <TableCell>Registro</TableCell>\n                <TableCell align=\"center\">Acciones</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredUsers\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((user) => (\n                  <TableRow key={user.id} hover>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                        <Avatar sx={{ bgcolor: '#007A33' }}>\n                          {user.displayName?.[0] || user.email[0].toUpperCase()}\n                        </Avatar>\n                        <Box>\n                          <Typography variant=\"body2\" fontWeight=\"bold\">\n                            {user.displayName || 'Sin nombre'}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {user.email}\n                          </Typography>\n                          {user.phone && (\n                            <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                              📱 {user.phone}\n                            </Typography>\n                          )}\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{getRoleChip(user.role)}</TableCell>\n                    <TableCell>{getStatusChip(user.status)}</TableCell>\n                    <TableCell>\n                      {user.role === 'worker' && (\n                        <Box>\n                          <Typography variant=\"caption\" display=\"block\">\n                            Oficio: {user.trade || 'No especificado'}\n                          </Typography>\n                          <Typography variant=\"caption\" display=\"block\">\n                            Exp: {user.experience || 0} años\n                          </Typography>\n                          <Typography variant=\"caption\" display=\"block\">\n                            ⭐ {user.rating?.toFixed(1) || '0.0'}\n                          </Typography>\n                        </Box>\n                      )}\n                      {user.role === 'employer' && (\n                        <Box>\n                          <Typography variant=\"caption\" display=\"block\">\n                            {(user as any).companyName || 'Sin empresa'}\n                          </Typography>\n                          <Typography variant=\"caption\" display=\"block\">\n                            {user.businessType || 'No especificado'}\n                          </Typography>\n                          {user.verified && <Chip label=\"Verificado\" size=\"small\" color=\"success\" icon={<Verified />} />}\n                        </Box>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\">\n                        {user.createdAt ? format(user.createdAt.toDate(), 'dd/MM/yyyy', { locale: es }) : 'N/A'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Tooltip title=\"Ver detalles\">\n                        <IconButton size=\"small\" onClick={() => openUserDetails(user)}>\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                      {user.status === 'active' ? (\n                        <Tooltip title=\"Bloquear\">\n                          <IconButton size=\"small\" color=\"error\" onClick={() => openActionDialog(user, 'block')}>\n                            <Block />\n                          </IconButton>\n                        </Tooltip>\n                      ) : (\n                        <Tooltip title=\"Desbloquear\">\n                          <IconButton size=\"small\" color=\"success\" onClick={() => openActionDialog(user, 'unblock')}>\n                            <CheckCircle />\n                          </IconButton>\n                        </Tooltip>\n                      )}\n                      {user.role === 'employer' && !user.verified && (\n                        <Tooltip title=\"Verificar empresa\">\n                          <IconButton size=\"small\" color=\"primary\" onClick={() => openActionDialog(user, 'verify')}>\n                            <Verified />\n                          </IconButton>\n                        </Tooltip>\n                      )}\n                      <Tooltip title=\"Eliminar\">\n                        <IconButton size=\"small\" color=\"error\" onClick={() => openActionDialog(user, 'delete')}>\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 50]}\n          component=\"div\"\n          count={filteredUsers.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          labelRowsPerPage=\"Filas por página:\"\n        />\n      </Paper>\n\n      {/* User Details Dialog */}\n      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          Detalles del Usuario\n        </DialogTitle>\n        <DialogContent>\n          {selectedUser && (\n            <Box sx={{ pt: 2 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Email</Typography>\n                  <Typography variant=\"body1\" gutterBottom>{selectedUser.email}</Typography>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Nombre</Typography>\n                  <Typography variant=\"body1\" gutterBottom>{selectedUser.displayName || 'No especificado'}</Typography>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Teléfono</Typography>\n                  <Typography variant=\"body1\" gutterBottom>{selectedUser.phone || 'No especificado'}</Typography>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Rol</Typography>\n                  <Box sx={{ mt: 0.5 }}>{getRoleChip(selectedUser.role)}</Box>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Estado</Typography>\n                  <Box sx={{ mt: 0.5 }}>{getStatusChip(selectedUser.status)}</Box>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Fecha de Registro</Typography>\n                  <Typography variant=\"body1\" gutterBottom>\n                    {selectedUser.createdAt ? format(selectedUser.createdAt.toDate(), 'dd/MM/yyyy HH:mm', { locale: es }) : 'N/A'}\n                  </Typography>\n                </Grid>\n                {selectedUser.role === 'worker' && (\n                  <>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">Oficio</Typography>\n                      <Typography variant=\"body1\" gutterBottom>{selectedUser.trade || 'No especificado'}</Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">Experiencia</Typography>\n                      <Typography variant=\"body1\" gutterBottom>{selectedUser.experience || 0} años</Typography>\n                    </Grid>\n                  </>\n                )}\n                {selectedUser.role === 'employer' && (\n                  <>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">Empresa</Typography>\n                      <Typography variant=\"body1\" gutterBottom>{(selectedUser as any).companyName || 'No especificado'}</Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">Tipo de Negocio</Typography>\n                      <Typography variant=\"body1\" gutterBottom>{selectedUser.businessType || 'No especificado'}</Typography>\n                    </Grid>\n                  </>\n                )}\n              </Grid>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDialogOpen(false)}>Cerrar</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Action Confirmation Dialog */}\n      <Dialog open={actionDialog} onClose={() => setActionDialog(false)}>\n        <DialogTitle>\n          Confirmar Acción\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            {actionType === 'block' && `¿Estás seguro de que quieres bloquear a ${selectedUser?.email}?`}\n            {actionType === 'unblock' && `¿Estás seguro de que quieres desbloquear a ${selectedUser?.email}?`}\n            {actionType === 'delete' && `¿Estás seguro de que quieres eliminar permanentemente a ${selectedUser?.email}? Esta acción no se puede deshacer.`}\n            {actionType === 'verify' && `¿Estás seguro de que quieres verificar la empresa de ${selectedUser?.email}?`}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialog(false)}>Cancelar</Button>\n          <Button onClick={handleUserAction} color=\"error\" variant=\"contained\">\n            Confirmar\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity as any}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default UserManagement;"],"names":["UserManagement","users","setUsers","useState","filteredUsers","setFilteredUsers","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","searchTerm","setSearchTerm","roleFilter","setRoleFilter","statusFilter","setStatusFilter","selectedUser","setSelectedUser","dialogOpen","setDialogOpen","actionDialog","setActionDialog","actionType","setActionType","snackbar","setSnackbar","open","message","severity","useEffect","fetchUsers","filterUsers","async","usersSnapshot","getDocs","collection","db","usersData","doc","docs","userData","data","additionalData","role","workerQuery","query","where","id","workerSnapshot","empty","_workerData$certifica","workerData","trade","experience","rating","certifications","length","employerQuery","employerSnapshot","employerData","companyName","businessType","verified","push","_objectSpread","email","displayName","phone","status","createdAt","lastLogin","profileComplete","error","console","filtered","filter","user","_user$displayName","_companyName","toLowerCase","includes","openActionDialog","action","getRoleChip","config","worker","label","color","employer","admin","_jsx","Chip","size","getStatusChip","active","icon","CheckCircle","blocked","Block","pending","Warning","_jsxs","Container","maxWidth","sx","mt","mb","children","Box","Typography","variant","fontWeight","gutterBottom","display","alignItems","gap","AdminPanelSettings","fontSize","Grid","container","spacing","item","xs","sm","md","Card","background","CardContent","u","Paper","p","TextField","fullWidth","placeholder","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","Search","FormControl","InputLabel","Select","MenuItem","Button","startIcon","FilterList","onClick","Download","exportUsers","csvContent","map","format","toDate","row","join","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","concat","Date","click","bgcolor","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","slice","_user$displayName2","_user$rating","hover","Avatar","toUpperCase","toFixed","Verified","locale","es","Tooltip","title","IconButton","openUserDetails","Edit","Delete","TablePagination","rowsPerPageOptions","component","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","labelRowsPerPage","Dialog","onClose","DialogTitle","DialogContent","pt","_Fragment","DialogActions","userRef","updateDoc","deleteDoc","ref","Snackbar","autoHideDuration","Alert"],"sourceRoot":""}