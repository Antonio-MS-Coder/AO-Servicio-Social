{"version":3,"file":"static/js/8408.23f5309e.chunk.js","mappings":"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","sources":["types/index.ts","pages/employer/AdvancedPostJob.tsx"],"sourcesContent":["// User types\nexport type UserRole = 'worker' | 'employer' | 'admin';\n\nexport interface User {\n  id: string;\n  email: string;\n  phone?: string;\n  displayName?: string;\n  photoURL?: string;\n  role: UserRole;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Worker profile\nexport interface WorkerProfile {\n  userId: string;\n  name: string;\n  trade: Trade;\n  secondaryTrades?: Trade[];\n  experience: number;\n  location: string;\n  bio?: string;\n  photoUrl?: string;\n  certifications: Certification[];\n  rating: number;\n  totalRatings: number;\n  available: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Employer profile\nexport interface EmployerProfile {\n  userId: string;\n  companyName: string;\n  contactName: string;\n  businessType: string;\n  location: string;\n  description?: string;\n  logoUrl?: string;\n  rating: number;\n  totalRatings: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Trade enum\nexport enum Trade {\n  WAITER = 'waiter',\n  COOK = 'cook',\n  BARTENDER = 'bartender',\n  CLEANER = 'cleaner',\n  SECURITY = 'security',\n  DRIVER = 'driver',\n  TRANSLATOR = 'translator',\n  GUIDE = 'guide',\n  ELECTRICIAN = 'electrician',\n  PLUMBER = 'plumber',\n  CARPENTER = 'carpenter',\n  PAINTER = 'painter',\n  GARDENER = 'gardener',\n  TECHNICIAN = 'technician',\n  OTHER = 'other'\n}\n\n// Certification\nexport interface Certification {\n  id: string;\n  name: string;\n  type?: string; // food_handling, first_aid, driver_license, etc.\n  issuer: string;\n  issueDate: Date;\n  expiryDate?: Date;\n  fileUrl?: string;\n  verified: boolean;\n}\n\n// Job posting\nexport interface JobPosting {\n  id: string;\n  employerId: string;\n  employerName: string;\n  title: string;\n  description: string;\n  trade: Trade;\n  salary: {\n    amount: number;\n    period: 'hour' | 'day' | 'week' | 'month' | 'project';\n  };\n  duration?: string;\n  location: string;\n  requirements?: string[];\n  status: 'open' | 'closed' | 'in_progress' | 'draft';\n  createdAt: Date;\n  updatedAt: Date;\n  applicants?: string[];\n}\n\n// Job application\nexport interface JobApplication {\n  id: string;\n  jobId: string;\n  workerId: string;\n  workerName: string;\n  workerPhoto?: string;\n  workerRating?: number;\n  workerExperience?: number;\n  workerTrade?: string;\n  coverLetter?: string;\n  status: 'pending' | 'accepted' | 'rejected';\n  appliedAt: Date | any;\n  updatedAt: Date | any;\n}\n\n// Rating\nexport interface Rating {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  jobId: string;\n  score: number;\n  comment?: string;\n  createdAt: Date;\n}\n\n// Message\nexport interface Message {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  content: string;\n  read: boolean;\n  createdAt: Date;\n}","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Container,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Box,\n  MenuItem,\n  InputAdornment,\n  Alert,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Grid,\n  Chip,\n  FormControlLabel,\n  Checkbox,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormLabel,\n  Slider,\n  Switch,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Autocomplete,\n  ToggleButton,\n  ToggleButtonGroup,\n  Card,\n  CardContent,\n  Divider\n} from '@mui/material';\nimport {\n  Add,\n  Remove,\n  LocationOn,\n  AttachMoney,\n  Schedule,\n  Work,\n  School,\n  Language,\n  DirectionsCar,\n  LocalHospital,\n  Restaurant,\n  Security,\n  Build,\n  Preview,\n  Save,\n  Publish,\n  ArrowBack,\n  ArrowForward,\n  CheckCircle,\n  Info,\n  CalendarToday\n} from '@mui/icons-material';\nimport { addDoc, collection, Timestamp } from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Trade, JobPosting } from '../../types';\n\ninterface JobFormData {\n  // Basic Information\n  title: string;\n  description: string;\n  trade: Trade;\n  urgency: 'normal' | 'urgent' | 'very_urgent';\n  \n  // Location & Schedule\n  location: string;\n  locationType: 'onsite' | 'remote' | 'hybrid';\n  address?: string;\n  workSchedule: {\n    type: 'full_time' | 'part_time' | 'flexible' | 'shifts';\n    days: string[];\n    startTime?: string;\n    endTime?: string;\n    shiftsDetails?: string;\n  };\n  \n  // Compensation & Benefits\n  salary: {\n    amount: number;\n    period: 'hour' | 'day' | 'week' | 'month' | 'project';\n    negotiable: boolean;\n    showSalary: boolean;\n  };\n  benefits: string[];\n  bonuses?: {\n    type: string;\n    amount: number;\n    description: string;\n  }[];\n  \n  // Requirements\n  experience: {\n    minimum: number;\n    preferred: number;\n  };\n  education?: string;\n  languages: string[];\n  certifications: string[];\n  skills: string[];\n  physicalRequirements?: string[];\n  \n  // Job Details\n  duration?: string;\n  startDate?: string;\n  contractType: 'permanent' | 'temporary' | 'contract' | 'seasonal';\n  positions: number;\n  teamSize?: number;\n  reportingTo?: string;\n  \n  // Application Settings\n  applicationDeadline?: string;\n  autoReject?: {\n    enabled: boolean;\n    criteria: string[];\n  };\n  screeningQuestions?: {\n    question: string;\n    type: 'text' | 'yes_no' | 'multiple_choice';\n    required: boolean;\n    options?: string[];\n  }[];\n  \n  // Visibility\n  featured: boolean;\n  visibility: 'public' | 'private' | 'invite_only';\n  tags: string[];\n}\n\nconst steps = [\n  'Información Básica',\n  'Ubicación y Horario',\n  'Compensación y Beneficios',\n  'Requisitos',\n  'Detalles del Trabajo',\n  'Configuración de Aplicación',\n  'Revisión y Publicación'\n];\n\nconst commonBenefits = [\n  'Seguro médico',\n  'Seguro de vida',\n  'Vacaciones pagadas',\n  'Aguinaldo',\n  'Bonos por desempeño',\n  'Comidas incluidas',\n  'Transporte',\n  'Uniforme',\n  'Capacitación',\n  'Oportunidad de crecimiento',\n  'Trabajo remoto',\n  'Horario flexible',\n  'Descuentos en productos',\n  'Gimnasio',\n  'Guardería'\n];\n\nconst commonSkills = [\n  'Trabajo en equipo',\n  'Comunicación efectiva',\n  'Liderazgo',\n  'Resolución de problemas',\n  'Atención al detalle',\n  'Manejo del tiempo',\n  'Adaptabilidad',\n  'Creatividad',\n  'Pensamiento crítico',\n  'Servicio al cliente',\n  'Manejo de computadora',\n  'Bilingüe',\n  'Manejo de efectivo',\n  'Ventas',\n  'Negociación'\n];\n\nconst AdvancedPostJob: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { currentUser, userData } = useAuth();\n  const [activeStep, setActiveStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [previewMode, setPreviewMode] = useState(false);\n  \n  const [jobData, setJobData] = useState<JobFormData>({\n    title: '',\n    description: '',\n    trade: Trade.OTHER,\n    urgency: 'normal',\n    location: '',\n    locationType: 'onsite',\n    workSchedule: {\n      type: 'full_time',\n      days: ['Lun', 'Mar', 'Mie', 'Jue', 'Vie']\n    },\n    salary: {\n      amount: 0,\n      period: 'hour',\n      negotiable: false,\n      showSalary: true\n    },\n    benefits: [],\n    experience: {\n      minimum: 0,\n      preferred: 2\n    },\n    languages: ['Español'],\n    certifications: [],\n    skills: [],\n    contractType: 'permanent',\n    positions: 1,\n    featured: false,\n    visibility: 'public',\n    tags: []\n  });\n\n  const handleNext = () => {\n    setActiveStep((prevStep) => prevStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevStep) => prevStep - 1);\n  };\n\n  const handleSubmit = async (status: 'draft' | 'open') => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      const jobPosting = {\n        ...jobData,\n        employerId: currentUser!.uid,\n        employerName: userData?.email || 'Empresa',\n        status,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n        applicants: [],\n        views: 0,\n        requirements: jobData.skills\n      };\n      \n      const docRef = await addDoc(collection(db, 'jobs'), jobPosting);\n      \n      if (status === 'open') {\n        navigate(`/jobs/${docRef.id}`);\n      } else {\n        navigate('/employer/jobs');\n      }\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isStepValid = (step: number): boolean => {\n    switch (step) {\n      case 0:\n        return jobData.title !== '' && jobData.description !== '';\n      case 1:\n        return jobData.location !== '';\n      case 2:\n        return jobData.salary.amount > 0;\n      case 3:\n        return true; // Requirements are optional\n      case 4:\n        return true; // Details are optional\n      case 5:\n        return true; // Application settings are optional\n      case 6:\n        return true; // Review step\n      default:\n        return false;\n    }\n  };\n\n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <Box>\n            <TextField\n              fullWidth\n              required\n              label=\"Título del trabajo\"\n              value={jobData.title}\n              onChange={(e) => setJobData({ ...jobData, title: e.target.value })}\n              placeholder=\"Ej: Mesero con experiencia\"\n              sx={{ mb: 3 }}\n            />\n            \n            <TextField\n              fullWidth\n              required\n              multiline\n              rows={6}\n              label=\"Descripción del trabajo\"\n              value={jobData.description}\n              onChange={(e) => setJobData({ ...jobData, description: e.target.value })}\n              placeholder=\"Describe las responsabilidades, el ambiente de trabajo, y lo que hace especial esta oportunidad...\"\n              sx={{ mb: 3 }}\n            />\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  required\n                  select\n                  label=\"Categoría del trabajo\"\n                  value={jobData.trade}\n                  onChange={(e) => setJobData({ ...jobData, trade: e.target.value as Trade })}\n                >\n                  {Object.values(Trade).map((trade) => (\n                    <MenuItem key={trade} value={trade}>\n                      {t(`trades.${trade}`)}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  label=\"Urgencia\"\n                  value={jobData.urgency}\n                  onChange={(e) => setJobData({ ...jobData, urgency: e.target.value as any })}\n                >\n                  <MenuItem value=\"normal\">Normal</MenuItem>\n                  <MenuItem value=\"urgent\">Urgente</MenuItem>\n                  <MenuItem value=\"very_urgent\">Muy Urgente</MenuItem>\n                </TextField>\n              </Grid>\n            </Grid>\n            \n            <Box sx={{ mt: 3 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Etiquetas (ayudan a encontrar tu trabajo)\n              </Typography>\n              <Autocomplete\n                multiple\n                freeSolo\n                options={['Mundial 2026', 'Turismo', 'Hospitalidad', 'Eventos', 'Nocturno', 'Fin de semana']}\n                value={jobData.tags}\n                onChange={(e, value) => setJobData({ ...jobData, tags: value })}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    placeholder=\"Agrega etiquetas...\"\n                  />\n                )}\n              />\n            </Box>\n          </Box>\n        );\n        \n      case 1:\n        return (\n          <Box>\n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\n              <FormLabel component=\"legend\">Tipo de ubicación</FormLabel>\n              <RadioGroup\n                row\n                value={jobData.locationType}\n                onChange={(e) => setJobData({ ...jobData, locationType: e.target.value as any })}\n              >\n                <FormControlLabel value=\"onsite\" control={<Radio />} label=\"Presencial\" />\n                <FormControlLabel value=\"remote\" control={<Radio />} label=\"Remoto\" />\n                <FormControlLabel value=\"hybrid\" control={<Radio />} label=\"Híbrido\" />\n              </RadioGroup>\n            </FormControl>\n            \n            {jobData.locationType !== 'remote' && (\n              <>\n                <TextField\n                  fullWidth\n                  required\n                  label=\"Ciudad o zona\"\n                  value={jobData.location}\n                  onChange={(e) => setJobData({ ...jobData, location: e.target.value })}\n                  placeholder=\"Ej: Guadalajara, Zona Centro\"\n                  sx={{ mb: 2 }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <LocationOn />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Dirección completa (opcional)\"\n                  value={jobData.address}\n                  onChange={(e) => setJobData({ ...jobData, address: e.target.value })}\n                  placeholder=\"Ej: Av. Juárez 123, Col. Centro\"\n                  sx={{ mb: 3 }}\n                />\n              </>\n            )}\n            \n            <Divider sx={{ my: 3 }} />\n            \n            <Typography variant=\"h6\" gutterBottom>\n              Horario de trabajo\n            </Typography>\n            \n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\n              <RadioGroup\n                value={jobData.workSchedule.type}\n                onChange={(e) => setJobData({ \n                  ...jobData, \n                  workSchedule: { ...jobData.workSchedule, type: e.target.value as any }\n                })}\n              >\n                <FormControlLabel value=\"full_time\" control={<Radio />} label=\"Tiempo completo\" />\n                <FormControlLabel value=\"part_time\" control={<Radio />} label=\"Medio tiempo\" />\n                <FormControlLabel value=\"flexible\" control={<Radio />} label=\"Horario flexible\" />\n                <FormControlLabel value=\"shifts\" control={<Radio />} label=\"Por turnos\" />\n              </RadioGroup>\n            </FormControl>\n            \n            {jobData.workSchedule.type !== 'flexible' && (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Días de trabajo\n                </Typography>\n                <ToggleButtonGroup\n                  value={jobData.workSchedule.days}\n                  onChange={(e, value) => setJobData({ \n                    ...jobData, \n                    workSchedule: { ...jobData.workSchedule, days: value }\n                  })}\n                  aria-label=\"días de trabajo\"\n                  sx={{ mb: 3, flexWrap: 'wrap' }}\n                >\n                  {['Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sáb', 'Dom'].map(day => (\n                    <ToggleButton key={day} value={day}>\n                      {day}\n                    </ToggleButton>\n                  ))}\n                </ToggleButtonGroup>\n                \n                {jobData.workSchedule.type !== 'shifts' && (\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Hora de entrada\"\n                        type=\"time\"\n                        value={jobData.workSchedule.startTime || ''}\n                        onChange={(e) => setJobData({ \n                          ...jobData, \n                          workSchedule: { ...jobData.workSchedule, startTime: e.target.value }\n                        })}\n                        InputLabelProps={{ shrink: true }}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Hora de salida\"\n                        type=\"time\"\n                        value={jobData.workSchedule.endTime || ''}\n                        onChange={(e) => setJobData({ \n                          ...jobData, \n                          workSchedule: { ...jobData.workSchedule, endTime: e.target.value }\n                        })}\n                        InputLabelProps={{ shrink: true }}\n                      />\n                    </Grid>\n                  </Grid>\n                )}\n                \n                {jobData.workSchedule.type === 'shifts' && (\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={3}\n                    label=\"Detalles de los turnos\"\n                    value={jobData.workSchedule.shiftsDetails || ''}\n                    onChange={(e) => setJobData({ \n                      ...jobData, \n                      workSchedule: { ...jobData.workSchedule, shiftsDetails: e.target.value }\n                    })}\n                    placeholder=\"Describe los turnos disponibles...\"\n                    sx={{ mt: 2 }}\n                  />\n                )}\n              </>\n            )}\n          </Box>\n        );\n        \n      case 2:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Compensación\n            </Typography>\n            \n            <Grid container spacing={2} sx={{ mb: 3 }}>\n              <Grid item xs={12} md={4}>\n                <TextField\n                  fullWidth\n                  required\n                  type=\"number\"\n                  label=\"Salario\"\n                  value={jobData.salary.amount}\n                  onChange={(e) => setJobData({ \n                    ...jobData, \n                    salary: { ...jobData.salary, amount: parseFloat(e.target.value) } \n                  })}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <TextField\n                  fullWidth\n                  required\n                  select\n                  label=\"Periodo\"\n                  value={jobData.salary.period}\n                  onChange={(e) => setJobData({ \n                    ...jobData, \n                    salary: { ...jobData.salary, period: e.target.value as any } \n                  })}\n                >\n                  <MenuItem value=\"hour\">Por hora</MenuItem>\n                  <MenuItem value=\"day\">Por día</MenuItem>\n                  <MenuItem value=\"week\">Por semana</MenuItem>\n                  <MenuItem value=\"month\">Por mes</MenuItem>\n                  <MenuItem value=\"project\">Por proyecto</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Box sx={{ pt: 1 }}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={jobData.salary.negotiable}\n                        onChange={(e) => setJobData({ \n                          ...jobData, \n                          salary: { ...jobData.salary, negotiable: e.target.checked }\n                        })}\n                      />\n                    }\n                    label=\"Salario negociable\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={jobData.salary.showSalary}\n                        onChange={(e) => setJobData({ \n                          ...jobData, \n                          salary: { ...jobData.salary, showSalary: e.target.checked }\n                        })}\n                      />\n                    }\n                    label=\"Mostrar salario\"\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n            \n            <Divider sx={{ my: 3 }} />\n            \n            <Typography variant=\"h6\" gutterBottom>\n              Beneficios\n            </Typography>\n            \n            <Box sx={{ mb: 3 }}>\n              {commonBenefits.map((benefit) => (\n                <Chip\n                  key={benefit}\n                  label={benefit}\n                  onClick={() => {\n                    if (jobData.benefits.includes(benefit)) {\n                      setJobData({ \n                        ...jobData, \n                        benefits: jobData.benefits.filter(b => b !== benefit)\n                      });\n                    } else {\n                      setJobData({ \n                        ...jobData, \n                        benefits: [...jobData.benefits, benefit]\n                      });\n                    }\n                  }}\n                  color={jobData.benefits.includes(benefit) ? 'primary' : 'default'}\n                  variant={jobData.benefits.includes(benefit) ? 'filled' : 'outlined'}\n                  sx={{ m: 0.5 }}\n                />\n              ))}\n            </Box>\n            \n            <TextField\n              fullWidth\n              label=\"Otros beneficios\"\n              placeholder=\"Escribe otros beneficios separados por comas...\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  const value = (e.target as HTMLInputElement).value;\n                  if (value && !jobData.benefits.includes(value)) {\n                    setJobData({ \n                      ...jobData, \n                      benefits: [...jobData.benefits, value]\n                    });\n                    (e.target as HTMLInputElement).value = '';\n                  }\n                }\n              }}\n            />\n          </Box>\n        );\n        \n      case 3:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Experiencia requerida\n            </Typography>\n            \n            <Grid container spacing={2} sx={{ mb: 3 }}>\n              <Grid item xs={12} md={6}>\n                <Typography gutterBottom>\n                  Mínima: {jobData.experience.minimum} años\n                </Typography>\n                <Slider\n                  value={jobData.experience.minimum}\n                  onChange={(e, value) => setJobData({ \n                    ...jobData, \n                    experience: { ...jobData.experience, minimum: value as number }\n                  })}\n                  min={0}\n                  max={15}\n                  marks\n                  valueLabelDisplay=\"auto\"\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Typography gutterBottom>\n                  Preferida: {jobData.experience.preferred} años\n                </Typography>\n                <Slider\n                  value={jobData.experience.preferred}\n                  onChange={(e, value) => setJobData({ \n                    ...jobData, \n                    experience: { ...jobData.experience, preferred: value as number }\n                  })}\n                  min={0}\n                  max={15}\n                  marks\n                  valueLabelDisplay=\"auto\"\n                />\n              </Grid>\n            </Grid>\n            \n            <TextField\n              fullWidth\n              label=\"Nivel educativo (opcional)\"\n              value={jobData.education || ''}\n              onChange={(e) => setJobData({ ...jobData, education: e.target.value })}\n              placeholder=\"Ej: Preparatoria, Licenciatura\"\n              sx={{ mb: 3 }}\n            />\n            \n            <Divider sx={{ my: 3 }} />\n            \n            <Typography variant=\"h6\" gutterBottom>\n              Idiomas requeridos\n            </Typography>\n            \n            <Autocomplete\n              multiple\n              options={['Español', 'Inglés', 'Francés', 'Alemán', 'Portugués', 'Italiano', 'Chino', 'Japonés']}\n              value={jobData.languages}\n              onChange={(e, value) => setJobData({ ...jobData, languages: value })}\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                  <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                ))\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  placeholder=\"Selecciona idiomas...\"\n                />\n              )}\n              sx={{ mb: 3 }}\n            />\n            \n            <Divider sx={{ my: 3 }} />\n            \n            <Typography variant=\"h6\" gutterBottom>\n              Habilidades requeridas\n            </Typography>\n            \n            <Box sx={{ mb: 3 }}>\n              {commonSkills.map((skill) => (\n                <Chip\n                  key={skill}\n                  label={skill}\n                  onClick={() => {\n                    if (jobData.skills.includes(skill)) {\n                      setJobData({ \n                        ...jobData, \n                        skills: jobData.skills.filter(s => s !== skill)\n                      });\n                    } else {\n                      setJobData({ \n                        ...jobData, \n                        skills: [...jobData.skills, skill]\n                      });\n                    }\n                  }}\n                  color={jobData.skills.includes(skill) ? 'primary' : 'default'}\n                  variant={jobData.skills.includes(skill) ? 'filled' : 'outlined'}\n                  sx={{ m: 0.5 }}\n                />\n              ))}\n            </Box>\n          </Box>\n        );\n        \n      case 4:\n        return (\n          <Box>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  label=\"Tipo de contrato\"\n                  value={jobData.contractType}\n                  onChange={(e) => setJobData({ ...jobData, contractType: e.target.value as any })}\n                >\n                  <MenuItem value=\"permanent\">Permanente</MenuItem>\n                  <MenuItem value=\"temporary\">Temporal</MenuItem>\n                  <MenuItem value=\"contract\">Por contrato</MenuItem>\n                  <MenuItem value=\"seasonal\">De temporada</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Número de posiciones\"\n                  value={jobData.positions}\n                  onChange={(e) => setJobData({ ...jobData, positions: parseInt(e.target.value) })}\n                  InputProps={{ inputProps: { min: 1 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Duración del trabajo\"\n                  value={jobData.duration || ''}\n                  onChange={(e) => setJobData({ ...jobData, duration: e.target.value })}\n                  placeholder=\"Ej: 6 meses, Proyecto de 3 semanas\"\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Fecha de inicio\"\n                  type=\"date\"\n                  value={jobData.startDate || ''}\n                  onChange={(e) => setJobData({ ...jobData, startDate: e.target.value })}\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Tamaño del equipo\"\n                  type=\"number\"\n                  value={jobData.teamSize || ''}\n                  onChange={(e) => setJobData({ ...jobData, teamSize: parseInt(e.target.value) })}\n                  placeholder=\"Número de personas en el equipo\"\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Reporta a\"\n                  value={jobData.reportingTo || ''}\n                  onChange={(e) => setJobData({ ...jobData, reportingTo: e.target.value })}\n                  placeholder=\"Ej: Gerente de operaciones\"\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        );\n        \n      case 5:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Configuración de aplicaciones\n            </Typography>\n            \n            <TextField\n              fullWidth\n              label=\"Fecha límite para aplicar\"\n              type=\"date\"\n              value={jobData.applicationDeadline || ''}\n              onChange={(e) => setJobData({ ...jobData, applicationDeadline: e.target.value })}\n              InputLabelProps={{ shrink: true }}\n              sx={{ mb: 3 }}\n            />\n            \n            <Divider sx={{ my: 3 }} />\n            \n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\n              <FormLabel component=\"legend\">Visibilidad del trabajo</FormLabel>\n              <RadioGroup\n                value={jobData.visibility}\n                onChange={(e) => setJobData({ ...jobData, visibility: e.target.value as any })}\n              >\n                <FormControlLabel \n                  value=\"public\" \n                  control={<Radio />} \n                  label=\"Público - Visible para todos\" \n                />\n                <FormControlLabel \n                  value=\"private\" \n                  control={<Radio />} \n                  label=\"Privado - Solo con enlace directo\" \n                />\n                <FormControlLabel \n                  value=\"invite_only\" \n                  control={<Radio />} \n                  label=\"Solo por invitación\" \n                />\n              </RadioGroup>\n            </FormControl>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={jobData.featured}\n                  onChange={(e) => setJobData({ ...jobData, featured: e.target.checked })}\n                />\n              }\n              label=\"Destacar este trabajo (aparece primero en búsquedas)\"\n              sx={{ mb: 3 }}\n            />\n            \n            <Alert severity=\"info\" sx={{ mb: 3 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Próximamente: Preguntas de filtrado\n              </Typography>\n              <Typography variant=\"body2\">\n                Podrás agregar preguntas personalizadas para filtrar candidatos automáticamente.\n              </Typography>\n            </Alert>\n          </Box>\n        );\n        \n      case 6:\n        return (\n          <Box>\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\n              Tu trabajo está listo para publicarse. Revisa los detalles a continuación.\n            </Alert>\n            \n            <Card sx={{ mb: 3 }}>\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  {jobData.title || 'Sin título'}\n                </Typography>\n                \n                <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\n                  <Chip label={t(`trades.${jobData.trade}`)} color=\"primary\" />\n                  <Chip label={jobData.contractType} />\n                  <Chip label={jobData.workSchedule.type.replace('_', ' ')} />\n                  {jobData.urgency !== 'normal' && (\n                    <Chip label={jobData.urgency === 'urgent' ? 'Urgente' : 'Muy Urgente'} color=\"error\" />\n                  )}\n                </Box>\n                \n                <Typography variant=\"body1\" paragraph>\n                  {jobData.description || 'Sin descripción'}\n                </Typography>\n                \n                <Divider sx={{ my: 2 }} />\n                \n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                      <LocationOn fontSize=\"small\" />\n                      <Typography variant=\"body2\">\n                        {jobData.location || 'Sin ubicación'} \n                        {jobData.locationType !== 'onsite' && ` (${jobData.locationType})`}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                      <AttachMoney fontSize=\"small\" />\n                      <Typography variant=\"body2\">\n                        ${jobData.salary.amount}/{jobData.salary.period}\n                        {jobData.salary.negotiable && ' (Negociable)'}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                      <Work fontSize=\"small\" />\n                      <Typography variant=\"body2\">\n                        {jobData.positions} posición(es) disponible(s)\n                      </Typography>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                      <School fontSize=\"small\" />\n                      <Typography variant=\"body2\">\n                        Experiencia: {jobData.experience.minimum}+ años\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                      <Language fontSize=\"small\" />\n                      <Typography variant=\"body2\">\n                        {jobData.languages.join(', ')}\n                      </Typography>\n                    </Box>\n                    {jobData.startDate && (\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                        <CalendarToday fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          Inicio: {new Date(jobData.startDate).toLocaleDateString('es-MX')}\n                        </Typography>\n                      </Box>\n                    )}\n                  </Grid>\n                </Grid>\n                \n                {jobData.benefits.length > 0 && (\n                  <>\n                    <Divider sx={{ my: 2 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Beneficios\n                    </Typography>\n                    <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\n                      {jobData.benefits.map((benefit) => (\n                        <Chip key={benefit} label={benefit} size=\"small\" variant=\"outlined\" />\n                      ))}\n                    </Box>\n                  </>\n                )}\n                \n                {jobData.skills.length > 0 && (\n                  <>\n                    <Divider sx={{ my: 2 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Habilidades requeridas\n                    </Typography>\n                    <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\n                      {jobData.skills.map((skill) => (\n                        <Chip key={skill} label={skill} size=\"small\" variant=\"outlined\" />\n                      ))}\n                    </Box>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n            \n            <Box display=\"flex\" gap={2} justifyContent=\"center\">\n              <Button\n                variant=\"outlined\"\n                size=\"large\"\n                startIcon={<Save />}\n                onClick={() => handleSubmit('draft')}\n                disabled={loading}\n              >\n                Guardar como borrador\n              </Button>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                startIcon={<Publish />}\n                onClick={() => handleSubmit('open')}\n                disabled={loading}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Publicar trabajo'}\n              </Button>\n            </Box>\n          </Box>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={4}>\n        <Typography variant=\"h4\">\n          Publicar Nuevo Trabajo\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          onClick={() => setPreviewMode(!previewMode)}\n          startIcon={<Preview />}\n        >\n          {previewMode ? 'Editar' : 'Vista previa'}\n        </Button>\n      </Box>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n      \n      <Grid container spacing={3}>\n        <Grid item xs={12} md={3}>\n          <Paper sx={{ p: 2 }}>\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n              {steps.map((label, index) => (\n                <Step key={label}>\n                  <StepLabel\n                    onClick={() => setActiveStep(index)}\n                    sx={{ cursor: 'pointer' }}\n                    StepIconComponent={() => (\n                      <Box\n                        sx={{\n                          width: 24,\n                          height: 24,\n                          borderRadius: '50%',\n                          bgcolor: activeStep === index ? 'primary.main' : \n                                  activeStep > index ? 'success.main' : 'grey.400',\n                          color: 'white',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          fontSize: 12\n                        }}\n                      >\n                        {activeStep > index ? <CheckCircle fontSize=\"small\" /> : index + 1}\n                      </Box>\n                    )}\n                  >\n                    {label}\n                  </StepLabel>\n                  <StepContent>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {isStepValid(index) ? 'Completo' : 'Pendiente'}\n                    </Typography>\n                  </StepContent>\n                </Step>\n              ))}\n            </Stepper>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={9}>\n          <Paper sx={{ p: 4 }}>\n            {renderStepContent(activeStep)}\n            \n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                startIcon={<ArrowBack />}\n              >\n                Anterior\n              </Button>\n              \n              {activeStep < steps.length - 1 && (\n                <Button\n                  variant=\"contained\"\n                  onClick={handleNext}\n                  endIcon={<ArrowForward />}\n                  disabled={!isStepValid(activeStep)}\n                >\n                  Siguiente\n                </Button>\n              )}\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AdvancedPostJob;"],"names":["Trade","steps","commonBenefits","commonSkills","AdvancedPostJob","t","useTranslation","navigate","useNavigate","currentUser","userData","useAuth","activeStep","setActiveStep","useState","loading","setLoading","error","setError","previewMode","setPreviewMode","jobData","setJobData","title","description","trade","OTHER","urgency","location","locationType","workSchedule","type","days","salary","amount","period","negotiable","showSalary","benefits","experience","minimum","preferred","languages","certifications","skills","contractType","positions","featured","visibility","tags","handleSubmit","async","jobPosting","_objectSpread","employerId","uid","employerName","email","status","createdAt","Timestamp","now","updatedAt","applicants","views","requirements","docRef","addDoc","collection","db","concat","id","err","message","isStepValid","step","_jsxs","Container","maxWidth","sx","py","children","Box","display","justifyContent","alignItems","mb","_jsx","Typography","variant","Button","onClick","startIcon","Preview","Alert","severity","onClose","Grid","container","spacing","item","xs","md","Paper","p","Stepper","orientation","map","label","index","Step","StepLabel","cursor","StepIconComponent","width","height","borderRadius","bgcolor","color","fontSize","CheckCircle","StepContent","TextField","fullWidth","required","value","onChange","e","target","placeholder","multiline","rows","select","Object","values","MenuItem","mt","gutterBottom","Autocomplete","multiple","freeSolo","options","renderTags","getTagProps","option","Chip","renderInput","params","FormControl","component","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","_Fragment","InputProps","startAdornment","InputAdornment","position","LocationOn","address","Divider","my","ToggleButtonGroup","flexWrap","day","ToggleButton","startTime","InputLabelProps","shrink","endTime","shiftsDetails","parseFloat","pt","Checkbox","checked","benefit","includes","filter","b","m","onKeyPress","key","Slider","min","max","marks","valueLabelDisplay","education","skill","s","parseInt","inputProps","duration","startDate","teamSize","reportingTo","applicationDeadline","Switch","Card","CardContent","gap","replace","paragraph","AttachMoney","Work","School","Language","join","CalendarToday","Date","toLocaleDateString","length","size","Save","disabled","Publish","CircularProgress","renderStepContent","handleBack","prevStep","ArrowBack","handleNext","endIcon","ArrowForward"],"sourceRoot":""}